
SPI_USART_Bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e4  080035e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035e4  080035e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035e4  080035e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae0  2000000c  080035f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aec  080035f8  00021aec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001003e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002415  00000000  00000000  00030073  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c0  00000000  00000000  00032488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  00032e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015585  00000000  00000000  000336f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009494  00000000  00000000  00048c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006cec1  00000000  00000000  00052109  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000befca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000256c  00000000  00000000  000bf048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080035a0 	.word	0x080035a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080035a0 	.word	0x080035a0

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f91f 	bl	80003a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 ff14 	bl	8002f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f937 	bl	800040a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8ff 	bl	80003b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000044 	.word	0x20000044

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000044 	.word	0x20000044

08000210 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	f003 021f 	and.w	r2, r3, #31
 8000284:	4906      	ldr	r1, [pc, #24]	; (80002a0 <NVIC_EnableIRQ+0x2c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	095b      	lsrs	r3, r3, #5
 800028c:	2001      	movs	r0, #1
 800028e:	fa00 f202 	lsl.w	r2, r0, r2
 8000292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da0b      	bge.n	80002d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <NVIC_SetPriority+0x4c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	3b04      	subs	r3, #4
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ce:	e009      	b.n	80002e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <NVIC_SetPriority+0x50>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b089      	sub	sp, #36	; 0x24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f003 0307 	and.w	r3, r3, #7
 800030a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	f1c3 0307 	rsb	r3, r3, #7
 8000312:	2b04      	cmp	r3, #4
 8000314:	bf28      	it	cs
 8000316:	2304      	movcs	r3, #4
 8000318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	3304      	adds	r3, #4
 800031e:	2b06      	cmp	r3, #6
 8000320:	d902      	bls.n	8000328 <NVIC_EncodePriority+0x30>
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3b03      	subs	r3, #3
 8000326:	e000      	b.n	800032a <NVIC_EncodePriority+0x32>
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800032c:	f04f 32ff 	mov.w	r2, #4294967295
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	43da      	mvns	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	401a      	ands	r2, r3
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000340:	f04f 31ff 	mov.w	r1, #4294967295
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	43d9      	mvns	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	4313      	orrs	r3, r2
         );
}
 8000352:	4618      	mov	r0, r3
 8000354:	3724      	adds	r7, #36	; 0x24
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800036c:	d301      	bcc.n	8000372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800036e:	2301      	movs	r3, #1
 8000370:	e00f      	b.n	8000392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <SysTick_Config+0x40>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3b01      	subs	r3, #1
 8000378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800037a:	210f      	movs	r1, #15
 800037c:	f04f 30ff 	mov.w	r0, #4294967295
 8000380:	f7ff ff90 	bl	80002a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <SysTick_Config+0x40>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <SysTick_Config+0x40>)
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	e000e010 	.word	0xe000e010

080003a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ff31 	bl	8000210 <NVIC_SetPriorityGrouping>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	4603      	mov	r3, r0
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003c8:	f7ff ff46 	bl	8000258 <NVIC_GetPriorityGrouping>
 80003cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	68b9      	ldr	r1, [r7, #8]
 80003d2:	6978      	ldr	r0, [r7, #20]
 80003d4:	f7ff ff90 	bl	80002f8 <NVIC_EncodePriority>
 80003d8:	4602      	mov	r2, r0
 80003da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff5f 	bl	80002a4 <NVIC_SetPriority>
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff39 	bl	8000274 <NVIC_EnableIRQ>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ffa2 	bl	800035c <SysTick_Config>
 8000418:	4603      	mov	r3, r0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d101      	bne.n	800043a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000436:	2301      	movs	r3, #1
 8000438:	e043      	b.n	80004c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	461a      	mov	r2, r3
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <HAL_DMA_Init+0xa8>)
 8000442:	4413      	add	r3, r2
 8000444:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <HAL_DMA_Init+0xac>)
 8000446:	fba2 2303 	umull	r2, r3, r2, r3
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	009a      	lsls	r2, r3, #2
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <HAL_DMA_Init+0xb0>)
 8000456:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2202      	movs	r2, #2
 800045c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800046e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000472:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800047c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800049c:	68fa      	ldr	r2, [r7, #12]
 800049e:	4313      	orrs	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2200      	movs	r2, #0
 80004ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2201      	movs	r2, #1
 80004b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80004c0:	2300      	movs	r3, #0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	bffdfff8 	.word	0xbffdfff8
 80004d0:	cccccccd 	.word	0xcccccccd
 80004d4:	40020000 	.word	0x40020000

080004d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80004e6:	2300      	movs	r3, #0
 80004e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d101      	bne.n	80004f8 <HAL_DMA_Start_IT+0x20>
 80004f4:	2302      	movs	r3, #2
 80004f6:	e04a      	b.n	800058e <HAL_DMA_Start_IT+0xb6>
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2201      	movs	r2, #1
 80004fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000506:	2b01      	cmp	r3, #1
 8000508:	d13a      	bne.n	8000580 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2202      	movs	r2, #2
 800050e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2200      	movs	r2, #0
 8000516:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f022 0201 	bic.w	r2, r2, #1
 8000526:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	68f8      	ldr	r0, [r7, #12]
 8000530:	f000 f9ae 	bl	8000890 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000538:	2b00      	cmp	r3, #0
 800053a:	d008      	beq.n	800054e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f042 020e 	orr.w	r2, r2, #14
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	e00f      	b.n	800056e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f022 0204 	bic.w	r2, r2, #4
 800055c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f042 020a 	orr.w	r2, r2, #10
 800056c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f042 0201 	orr.w	r2, r2, #1
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	e005      	b.n	800058c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2200      	movs	r2, #0
 8000584:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000588:	2302      	movs	r3, #2
 800058a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800058c:	7dfb      	ldrb	r3, [r7, #23]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d005      	beq.n	80005ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2204      	movs	r2, #4
 80005b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	e051      	b.n	800065e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f022 020e 	bic.w	r2, r2, #14
 80005c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f022 0201 	bic.w	r2, r2, #1
 80005d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a22      	ldr	r2, [pc, #136]	; (8000668 <HAL_DMA_Abort_IT+0xd0>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d029      	beq.n	8000638 <HAL_DMA_Abort_IT+0xa0>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a20      	ldr	r2, [pc, #128]	; (800066c <HAL_DMA_Abort_IT+0xd4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d022      	beq.n	8000634 <HAL_DMA_Abort_IT+0x9c>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a1f      	ldr	r2, [pc, #124]	; (8000670 <HAL_DMA_Abort_IT+0xd8>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d01a      	beq.n	800062e <HAL_DMA_Abort_IT+0x96>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <HAL_DMA_Abort_IT+0xdc>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d012      	beq.n	8000628 <HAL_DMA_Abort_IT+0x90>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <HAL_DMA_Abort_IT+0xe0>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d00a      	beq.n	8000622 <HAL_DMA_Abort_IT+0x8a>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1a      	ldr	r2, [pc, #104]	; (800067c <HAL_DMA_Abort_IT+0xe4>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d102      	bne.n	800061c <HAL_DMA_Abort_IT+0x84>
 8000616:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800061a:	e00e      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 800061c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000620:	e00b      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	e008      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	e005      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 800062e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000632:	e002      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 8000634:	2310      	movs	r3, #16
 8000636:	e000      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 8000638:	2301      	movs	r3, #1
 800063a:	4a11      	ldr	r2, [pc, #68]	; (8000680 <HAL_DMA_Abort_IT+0xe8>)
 800063c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	4798      	blx	r3
    } 
  }
  return status;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40020008 	.word	0x40020008
 800066c:	4002001c 	.word	0x4002001c
 8000670:	40020030 	.word	0x40020030
 8000674:	40020044 	.word	0x40020044
 8000678:	40020058 	.word	0x40020058
 800067c:	4002006c 	.word	0x4002006c
 8000680:	40020000 	.word	0x40020000

08000684 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	2204      	movs	r2, #4
 80006a2:	409a      	lsls	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4013      	ands	r3, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d04f      	beq.n	800074c <HAL_DMA_IRQHandler+0xc8>
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d04a      	beq.n	800074c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f003 0320 	and.w	r3, r3, #32
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d107      	bne.n	80006d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f022 0204 	bic.w	r2, r2, #4
 80006d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a66      	ldr	r2, [pc, #408]	; (8000874 <HAL_DMA_IRQHandler+0x1f0>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d029      	beq.n	8000732 <HAL_DMA_IRQHandler+0xae>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a65      	ldr	r2, [pc, #404]	; (8000878 <HAL_DMA_IRQHandler+0x1f4>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d022      	beq.n	800072e <HAL_DMA_IRQHandler+0xaa>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a63      	ldr	r2, [pc, #396]	; (800087c <HAL_DMA_IRQHandler+0x1f8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d01a      	beq.n	8000728 <HAL_DMA_IRQHandler+0xa4>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a62      	ldr	r2, [pc, #392]	; (8000880 <HAL_DMA_IRQHandler+0x1fc>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d012      	beq.n	8000722 <HAL_DMA_IRQHandler+0x9e>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a60      	ldr	r2, [pc, #384]	; (8000884 <HAL_DMA_IRQHandler+0x200>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d00a      	beq.n	800071c <HAL_DMA_IRQHandler+0x98>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a5f      	ldr	r2, [pc, #380]	; (8000888 <HAL_DMA_IRQHandler+0x204>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d102      	bne.n	8000716 <HAL_DMA_IRQHandler+0x92>
 8000710:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000714:	e00e      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 8000716:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800071a:	e00b      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 800071c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000720:	e008      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 8000722:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000726:	e005      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 8000728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072c:	e002      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	e000      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 8000732:	2304      	movs	r3, #4
 8000734:	4a55      	ldr	r2, [pc, #340]	; (800088c <HAL_DMA_IRQHandler+0x208>)
 8000736:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073c:	2b00      	cmp	r3, #0
 800073e:	f000 8094 	beq.w	800086a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800074a:	e08e      	b.n	800086a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	2202      	movs	r2, #2
 8000752:	409a      	lsls	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4013      	ands	r3, r2
 8000758:	2b00      	cmp	r3, #0
 800075a:	d056      	beq.n	800080a <HAL_DMA_IRQHandler+0x186>
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	2b00      	cmp	r3, #0
 8000764:	d051      	beq.n	800080a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f003 0320 	and.w	r3, r3, #32
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10b      	bne.n	800078c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f022 020a 	bic.w	r2, r2, #10
 8000782:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2201      	movs	r2, #1
 8000788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a38      	ldr	r2, [pc, #224]	; (8000874 <HAL_DMA_IRQHandler+0x1f0>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d029      	beq.n	80007ea <HAL_DMA_IRQHandler+0x166>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a37      	ldr	r2, [pc, #220]	; (8000878 <HAL_DMA_IRQHandler+0x1f4>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d022      	beq.n	80007e6 <HAL_DMA_IRQHandler+0x162>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a35      	ldr	r2, [pc, #212]	; (800087c <HAL_DMA_IRQHandler+0x1f8>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d01a      	beq.n	80007e0 <HAL_DMA_IRQHandler+0x15c>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a34      	ldr	r2, [pc, #208]	; (8000880 <HAL_DMA_IRQHandler+0x1fc>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d012      	beq.n	80007da <HAL_DMA_IRQHandler+0x156>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a32      	ldr	r2, [pc, #200]	; (8000884 <HAL_DMA_IRQHandler+0x200>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d00a      	beq.n	80007d4 <HAL_DMA_IRQHandler+0x150>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a31      	ldr	r2, [pc, #196]	; (8000888 <HAL_DMA_IRQHandler+0x204>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d102      	bne.n	80007ce <HAL_DMA_IRQHandler+0x14a>
 80007c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80007cc:	e00e      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007d2:	e00b      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007d8:	e008      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	e005      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e4:	e002      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007e6:	2320      	movs	r3, #32
 80007e8:	e000      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007ea:	2302      	movs	r3, #2
 80007ec:	4a27      	ldr	r2, [pc, #156]	; (800088c <HAL_DMA_IRQHandler+0x208>)
 80007ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d034      	beq.n	800086a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000808:	e02f      	b.n	800086a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	2208      	movs	r2, #8
 8000810:	409a      	lsls	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	4013      	ands	r3, r2
 8000816:	2b00      	cmp	r3, #0
 8000818:	d028      	beq.n	800086c <HAL_DMA_IRQHandler+0x1e8>
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	f003 0308 	and.w	r3, r3, #8
 8000820:	2b00      	cmp	r3, #0
 8000822:	d023      	beq.n	800086c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f022 020e 	bic.w	r2, r2, #14
 8000832:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800083c:	2101      	movs	r1, #1
 800083e:	fa01 f202 	lsl.w	r2, r1, r2
 8000842:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2201      	movs	r2, #1
 800084e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	2b00      	cmp	r3, #0
 8000860:	d004      	beq.n	800086c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	4798      	blx	r3
    }
  }
  return;
 800086a:	bf00      	nop
 800086c:	bf00      	nop
}
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40020008 	.word	0x40020008
 8000878:	4002001c 	.word	0x4002001c
 800087c:	40020030 	.word	0x40020030
 8000880:	40020044 	.word	0x40020044
 8000884:	40020058 	.word	0x40020058
 8000888:	4002006c 	.word	0x4002006c
 800088c:	40020000 	.word	0x40020000

08000890 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
 800089c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008a6:	2101      	movs	r1, #1
 80008a8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b10      	cmp	r3, #16
 80008bc:	d108      	bne.n	80008d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80008ce:	e007      	b.n	80008e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	60da      	str	r2, [r3, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
	...

080008ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b08b      	sub	sp, #44	; 0x2c
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
 800090e:	e127      	b.n	8000b60 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000910:	2201      	movs	r2, #1
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	f040 8116 	bne.w	8000b5a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b12      	cmp	r3, #18
 8000934:	d034      	beq.n	80009a0 <HAL_GPIO_Init+0xb4>
 8000936:	2b12      	cmp	r3, #18
 8000938:	d80d      	bhi.n	8000956 <HAL_GPIO_Init+0x6a>
 800093a:	2b02      	cmp	r3, #2
 800093c:	d02b      	beq.n	8000996 <HAL_GPIO_Init+0xaa>
 800093e:	2b02      	cmp	r3, #2
 8000940:	d804      	bhi.n	800094c <HAL_GPIO_Init+0x60>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d031      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
 8000946:	2b01      	cmp	r3, #1
 8000948:	d01c      	beq.n	8000984 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800094a:	e048      	b.n	80009de <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800094c:	2b03      	cmp	r3, #3
 800094e:	d043      	beq.n	80009d8 <HAL_GPIO_Init+0xec>
 8000950:	2b11      	cmp	r3, #17
 8000952:	d01b      	beq.n	800098c <HAL_GPIO_Init+0xa0>
          break;
 8000954:	e043      	b.n	80009de <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000956:	4a87      	ldr	r2, [pc, #540]	; (8000b74 <HAL_GPIO_Init+0x288>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d026      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
 800095c:	4a85      	ldr	r2, [pc, #532]	; (8000b74 <HAL_GPIO_Init+0x288>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d806      	bhi.n	8000970 <HAL_GPIO_Init+0x84>
 8000962:	4a85      	ldr	r2, [pc, #532]	; (8000b78 <HAL_GPIO_Init+0x28c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d020      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
 8000968:	4a84      	ldr	r2, [pc, #528]	; (8000b7c <HAL_GPIO_Init+0x290>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d01d      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
          break;
 800096e:	e036      	b.n	80009de <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000970:	4a83      	ldr	r2, [pc, #524]	; (8000b80 <HAL_GPIO_Init+0x294>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d019      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
 8000976:	4a83      	ldr	r2, [pc, #524]	; (8000b84 <HAL_GPIO_Init+0x298>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d016      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
 800097c:	4a82      	ldr	r2, [pc, #520]	; (8000b88 <HAL_GPIO_Init+0x29c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d013      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
          break;
 8000982:	e02c      	b.n	80009de <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	623b      	str	r3, [r7, #32]
          break;
 800098a:	e028      	b.n	80009de <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	3304      	adds	r3, #4
 8000992:	623b      	str	r3, [r7, #32]
          break;
 8000994:	e023      	b.n	80009de <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	3308      	adds	r3, #8
 800099c:	623b      	str	r3, [r7, #32]
          break;
 800099e:	e01e      	b.n	80009de <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	330c      	adds	r3, #12
 80009a6:	623b      	str	r3, [r7, #32]
          break;
 80009a8:	e019      	b.n	80009de <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009b2:	2304      	movs	r3, #4
 80009b4:	623b      	str	r3, [r7, #32]
          break;
 80009b6:	e012      	b.n	80009de <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d105      	bne.n	80009cc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c0:	2308      	movs	r3, #8
 80009c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	611a      	str	r2, [r3, #16]
          break;
 80009ca:	e008      	b.n	80009de <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009cc:	2308      	movs	r3, #8
 80009ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69fa      	ldr	r2, [r7, #28]
 80009d4:	615a      	str	r2, [r3, #20]
          break;
 80009d6:	e002      	b.n	80009de <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	2bff      	cmp	r3, #255	; 0xff
 80009e2:	d801      	bhi.n	80009e8 <HAL_GPIO_Init+0xfc>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	e001      	b.n	80009ec <HAL_GPIO_Init+0x100>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3304      	adds	r3, #4
 80009ec:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	2bff      	cmp	r3, #255	; 0xff
 80009f2:	d802      	bhi.n	80009fa <HAL_GPIO_Init+0x10e>
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	e002      	b.n	8000a00 <HAL_GPIO_Init+0x114>
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	3b08      	subs	r3, #8
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	210f      	movs	r1, #15
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	401a      	ands	r2, r3
 8000a12:	6a39      	ldr	r1, [r7, #32]
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f000 8096 	beq.w	8000b5a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2e:	4b57      	ldr	r3, [pc, #348]	; (8000b8c <HAL_GPIO_Init+0x2a0>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a56      	ldr	r2, [pc, #344]	; (8000b8c <HAL_GPIO_Init+0x2a0>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b54      	ldr	r3, [pc, #336]	; (8000b8c <HAL_GPIO_Init+0x2a0>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000a46:	4a52      	ldr	r2, [pc, #328]	; (8000b90 <HAL_GPIO_Init+0x2a4>)
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	4013      	ands	r3, r2
 8000a68:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a49      	ldr	r2, [pc, #292]	; (8000b94 <HAL_GPIO_Init+0x2a8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0x1ae>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <HAL_GPIO_Init+0x2ac>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00d      	beq.n	8000a96 <HAL_GPIO_Init+0x1aa>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a47      	ldr	r2, [pc, #284]	; (8000b9c <HAL_GPIO_Init+0x2b0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0x1a6>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a46      	ldr	r2, [pc, #280]	; (8000ba0 <HAL_GPIO_Init+0x2b4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_GPIO_Init+0x1a2>
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x1b0>
 8000a8e:	2304      	movs	r3, #4
 8000a90:	e004      	b.n	8000a9c <HAL_GPIO_Init+0x1b0>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e002      	b.n	8000a9c <HAL_GPIO_Init+0x1b0>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <HAL_GPIO_Init+0x1b0>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9e:	f002 0203 	and.w	r2, r2, #3
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	4093      	lsls	r3, r2
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000aac:	4938      	ldr	r1, [pc, #224]	; (8000b90 <HAL_GPIO_Init+0x2a4>)
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4936      	ldr	r1, [pc, #216]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	600b      	str	r3, [r1, #0]
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad4:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	4931      	ldr	r1, [pc, #196]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	492c      	ldr	r1, [pc, #176]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	604b      	str	r3, [r1, #4]
 8000afa:	e006      	b.n	8000b0a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000afc:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4927      	ldr	r1, [pc, #156]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	4922      	ldr	r1, [pc, #136]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	608b      	str	r3, [r1, #8]
 8000b22:	e006      	b.n	8000b32 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	491d      	ldr	r1, [pc, #116]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b2e:	4013      	ands	r3, r2
 8000b30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	4918      	ldr	r1, [pc, #96]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60cb      	str	r3, [r1, #12]
 8000b4a:	e006      	b.n	8000b5a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b4e:	68da      	ldr	r2, [r3, #12]
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	4913      	ldr	r1, [pc, #76]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	2b0f      	cmp	r3, #15
 8000b64:	f67f aed4 	bls.w	8000910 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000b68:	bf00      	nop
 8000b6a:	372c      	adds	r7, #44	; 0x2c
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	10210000 	.word	0x10210000
 8000b78:	10110000 	.word	0x10110000
 8000b7c:	10120000 	.word	0x10120000
 8000b80:	10310000 	.word	0x10310000
 8000b84:	10320000 	.word	0x10320000
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40011400 	.word	0x40011400
 8000ba4:	40010400 	.word	0x40010400

08000ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bb8:	787b      	ldrb	r3, [r7, #1]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bc4:	e003      	b.n	8000bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	041a      	lsls	r2, r3, #16
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	611a      	str	r2, [r3, #16]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f000 8087 	beq.w	8000d00 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bf2:	4b92      	ldr	r3, [pc, #584]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 030c 	and.w	r3, r3, #12
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d00c      	beq.n	8000c18 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bfe:	4b8f      	ldr	r3, [pc, #572]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 030c 	and.w	r3, r3, #12
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	d112      	bne.n	8000c30 <HAL_RCC_OscConfig+0x58>
 8000c0a:	4b8c      	ldr	r3, [pc, #560]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c16:	d10b      	bne.n	8000c30 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c18:	4b88      	ldr	r3, [pc, #544]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d06c      	beq.n	8000cfe <HAL_RCC_OscConfig+0x126>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d168      	bne.n	8000cfe <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e22d      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c38:	d106      	bne.n	8000c48 <HAL_RCC_OscConfig+0x70>
 8000c3a:	4b80      	ldr	r3, [pc, #512]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a7f      	ldr	r2, [pc, #508]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e02e      	b.n	8000ca6 <HAL_RCC_OscConfig+0xce>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d10c      	bne.n	8000c6a <HAL_RCC_OscConfig+0x92>
 8000c50:	4b7a      	ldr	r3, [pc, #488]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a79      	ldr	r2, [pc, #484]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b77      	ldr	r3, [pc, #476]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a76      	ldr	r2, [pc, #472]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	e01d      	b.n	8000ca6 <HAL_RCC_OscConfig+0xce>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c72:	d10c      	bne.n	8000c8e <HAL_RCC_OscConfig+0xb6>
 8000c74:	4b71      	ldr	r3, [pc, #452]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a70      	ldr	r2, [pc, #448]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b6e      	ldr	r3, [pc, #440]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a6d      	ldr	r2, [pc, #436]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e00b      	b.n	8000ca6 <HAL_RCC_OscConfig+0xce>
 8000c8e:	4b6b      	ldr	r3, [pc, #428]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a6a      	ldr	r2, [pc, #424]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	4b68      	ldr	r3, [pc, #416]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a67      	ldr	r2, [pc, #412]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca4:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d013      	beq.n	8000cd6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cae:	f7ff faa5 	bl	80001fc <HAL_GetTick>
 8000cb2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb4:	e008      	b.n	8000cc8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb6:	f7ff faa1 	bl	80001fc <HAL_GetTick>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	2b64      	cmp	r3, #100	; 0x64
 8000cc2:	d901      	bls.n	8000cc8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e1e1      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc8:	4b5c      	ldr	r3, [pc, #368]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f0      	beq.n	8000cb6 <HAL_RCC_OscConfig+0xde>
 8000cd4:	e014      	b.n	8000d00 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd6:	f7ff fa91 	bl	80001fc <HAL_GetTick>
 8000cda:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cdc:	e008      	b.n	8000cf0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cde:	f7ff fa8d 	bl	80001fc <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b64      	cmp	r3, #100	; 0x64
 8000cea:	d901      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e1cd      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf0:	4b52      	ldr	r3, [pc, #328]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f0      	bne.n	8000cde <HAL_RCC_OscConfig+0x106>
 8000cfc:	e000      	b.n	8000d00 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d063      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d0c:	4b4b      	ldr	r3, [pc, #300]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00b      	beq.n	8000d30 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d18:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d11c      	bne.n	8000d5e <HAL_RCC_OscConfig+0x186>
 8000d24:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d116      	bne.n	8000d5e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <HAL_RCC_OscConfig+0x170>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d001      	beq.n	8000d48 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e1a1      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d48:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4939      	ldr	r1, [pc, #228]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5c:	e03a      	b.n	8000dd4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d020      	beq.n	8000da8 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d66:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <HAL_RCC_OscConfig+0x268>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fa46 	bl	80001fc <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d74:	f7ff fa42 	bl	80001fc <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e182      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d86:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f0      	beq.n	8000d74 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	4926      	ldr	r1, [pc, #152]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000da2:	4313      	orrs	r3, r2
 8000da4:	600b      	str	r3, [r1, #0]
 8000da6:	e015      	b.n	8000dd4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <HAL_RCC_OscConfig+0x268>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dae:	f7ff fa25 	bl	80001fc <HAL_GetTick>
 8000db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db6:	f7ff fa21 	bl	80001fc <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e161      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f0      	bne.n	8000db6 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d039      	beq.n	8000e54 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d019      	beq.n	8000e1c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dee:	f7ff fa05 	bl	80001fc <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000df6:	f7ff fa01 	bl	80001fc <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e141      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_RCC_OscConfig+0x264>)
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f0      	beq.n	8000df6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f000 fae3 	bl	80013e0 <RCC_Delay>
 8000e1a:	e01b      	b.n	8000e54 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e22:	f7ff f9eb 	bl	80001fc <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e28:	e00e      	b.n	8000e48 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e2a:	f7ff f9e7 	bl	80001fc <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d907      	bls.n	8000e48 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e127      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	42420000 	.word	0x42420000
 8000e44:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e48:	4b92      	ldr	r3, [pc, #584]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1ea      	bne.n	8000e2a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 80a6 	beq.w	8000fae <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e66:	4b8b      	ldr	r3, [pc, #556]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10d      	bne.n	8000e8e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	4b88      	ldr	r3, [pc, #544]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	4a87      	ldr	r2, [pc, #540]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	61d3      	str	r3, [r2, #28]
 8000e7e:	4b85      	ldr	r3, [pc, #532]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e8e:	4b82      	ldr	r3, [pc, #520]	; (8001098 <HAL_RCC_OscConfig+0x4c0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d118      	bne.n	8000ecc <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e9a:	4b7f      	ldr	r3, [pc, #508]	; (8001098 <HAL_RCC_OscConfig+0x4c0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a7e      	ldr	r2, [pc, #504]	; (8001098 <HAL_RCC_OscConfig+0x4c0>)
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ea6:	f7ff f9a9 	bl	80001fc <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eac:	e008      	b.n	8000ec0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eae:	f7ff f9a5 	bl	80001fc <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b64      	cmp	r3, #100	; 0x64
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e0e5      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec0:	4b75      	ldr	r3, [pc, #468]	; (8001098 <HAL_RCC_OscConfig+0x4c0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0f0      	beq.n	8000eae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d106      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x30a>
 8000ed4:	4b6f      	ldr	r3, [pc, #444]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4a6e      	ldr	r2, [pc, #440]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6213      	str	r3, [r2, #32]
 8000ee0:	e02d      	b.n	8000f3e <HAL_RCC_OscConfig+0x366>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10c      	bne.n	8000f04 <HAL_RCC_OscConfig+0x32c>
 8000eea:	4b6a      	ldr	r3, [pc, #424]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a69      	ldr	r2, [pc, #420]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6213      	str	r3, [r2, #32]
 8000ef6:	4b67      	ldr	r3, [pc, #412]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a66      	ldr	r2, [pc, #408]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000efc:	f023 0304 	bic.w	r3, r3, #4
 8000f00:	6213      	str	r3, [r2, #32]
 8000f02:	e01c      	b.n	8000f3e <HAL_RCC_OscConfig+0x366>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d10c      	bne.n	8000f26 <HAL_RCC_OscConfig+0x34e>
 8000f0c:	4b61      	ldr	r3, [pc, #388]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4a60      	ldr	r2, [pc, #384]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6213      	str	r3, [r2, #32]
 8000f18:	4b5e      	ldr	r3, [pc, #376]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4a5d      	ldr	r2, [pc, #372]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6213      	str	r3, [r2, #32]
 8000f24:	e00b      	b.n	8000f3e <HAL_RCC_OscConfig+0x366>
 8000f26:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	4a5a      	ldr	r2, [pc, #360]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	6213      	str	r3, [r2, #32]
 8000f32:	4b58      	ldr	r3, [pc, #352]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	4a57      	ldr	r2, [pc, #348]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000f38:	f023 0304 	bic.w	r3, r3, #4
 8000f3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d015      	beq.n	8000f72 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f46:	f7ff f959 	bl	80001fc <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4c:	e00a      	b.n	8000f64 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4e:	f7ff f955 	bl	80001fc <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e093      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0ee      	beq.n	8000f4e <HAL_RCC_OscConfig+0x376>
 8000f70:	e014      	b.n	8000f9c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f72:	f7ff f943 	bl	80001fc <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f78:	e00a      	b.n	8000f90 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f7a:	f7ff f93f 	bl	80001fc <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e07d      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f90:	4b40      	ldr	r3, [pc, #256]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1ee      	bne.n	8000f7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d105      	bne.n	8000fae <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fa2:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a3b      	ldr	r2, [pc, #236]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d069      	beq.n	800108a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb6:	4b37      	ldr	r3, [pc, #220]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d061      	beq.n	8001086 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d146      	bne.n	8001058 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fca:	4b34      	ldr	r3, [pc, #208]	; (800109c <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff f914 	bl	80001fc <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd8:	f7ff f910 	bl	80001fc <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e050      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffe:	d108      	bne.n	8001012 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4921      	ldr	r1, [pc, #132]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a19      	ldr	r1, [r3, #32]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	430b      	orrs	r3, r1
 8001024:	491b      	ldr	r1, [pc, #108]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 8001026:	4313      	orrs	r3, r2
 8001028:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <HAL_RCC_OscConfig+0x4c4>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff f8e4 	bl	80001fc <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001038:	f7ff f8e0 	bl	80001fc <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e020      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0x460>
 8001056:	e018      	b.n	800108a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_RCC_OscConfig+0x4c4>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105e:	f7ff f8cd 	bl	80001fc <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001066:	f7ff f8c9 	bl	80001fc <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e009      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_RCC_OscConfig+0x4bc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f0      	bne.n	8001066 <HAL_RCC_OscConfig+0x48e>
 8001084:	e001      	b.n	800108a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	40007000 	.word	0x40007000
 800109c:	42420060 	.word	0x42420060

080010a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010ae:	4b7e      	ldr	r3, [pc, #504]	; (80012a8 <HAL_RCC_ClockConfig+0x208>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d910      	bls.n	80010de <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010bc:	4b7a      	ldr	r3, [pc, #488]	; (80012a8 <HAL_RCC_ClockConfig+0x208>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 0207 	bic.w	r2, r3, #7
 80010c4:	4978      	ldr	r1, [pc, #480]	; (80012a8 <HAL_RCC_ClockConfig+0x208>)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010cc:	4b76      	ldr	r3, [pc, #472]	; (80012a8 <HAL_RCC_ClockConfig+0x208>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d001      	beq.n	80010de <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e0e0      	b.n	80012a0 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d020      	beq.n	800112c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f6:	4b6d      	ldr	r3, [pc, #436]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4a6c      	ldr	r2, [pc, #432]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 80010fc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001100:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d005      	beq.n	800111a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800110e:	4b67      	ldr	r3, [pc, #412]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4a66      	ldr	r2, [pc, #408]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 8001114:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001118:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800111a:	4b64      	ldr	r3, [pc, #400]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	4961      	ldr	r1, [pc, #388]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d06a      	beq.n	800120e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d107      	bne.n	8001150 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001140:	4b5a      	ldr	r3, [pc, #360]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d115      	bne.n	8001178 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0a7      	b.n	80012a0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d107      	bne.n	8001168 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001158:	4b54      	ldr	r3, [pc, #336]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d109      	bne.n	8001178 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e09b      	b.n	80012a0 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	4b50      	ldr	r3, [pc, #320]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e093      	b.n	80012a0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001178:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f023 0203 	bic.w	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4949      	ldr	r1, [pc, #292]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 8001186:	4313      	orrs	r3, r2
 8001188:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800118a:	f7ff f837 	bl	80001fc <HAL_GetTick>
 800118e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d112      	bne.n	80011be <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001198:	e00a      	b.n	80011b0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800119a:	f7ff f82f 	bl	80001fc <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e077      	b.n	80012a0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b0:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d1ee      	bne.n	800119a <HAL_RCC_ClockConfig+0xfa>
 80011bc:	e027      	b.n	800120e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d11d      	bne.n	8001202 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c6:	e00a      	b.n	80011de <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c8:	f7ff f818 	bl	80001fc <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e060      	b.n	80012a0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011de:	4b33      	ldr	r3, [pc, #204]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d1ee      	bne.n	80011c8 <HAL_RCC_ClockConfig+0x128>
 80011ea:	e010      	b.n	800120e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ec:	f7ff f806 	bl	80001fc <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e04e      	b.n	80012a0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1ee      	bne.n	80011ec <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_RCC_ClockConfig+0x208>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d210      	bcs.n	800123e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <HAL_RCC_ClockConfig+0x208>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f023 0207 	bic.w	r2, r3, #7
 8001224:	4920      	ldr	r1, [pc, #128]	; (80012a8 <HAL_RCC_ClockConfig+0x208>)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <HAL_RCC_ClockConfig+0x208>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d001      	beq.n	800123e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e030      	b.n	80012a0 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4915      	ldr	r1, [pc, #84]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d009      	beq.n	800127c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	490d      	ldr	r1, [pc, #52]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800127c:	f000 f81c 	bl	80012b8 <HAL_RCC_GetSysClockFreq>
 8001280:	4601      	mov	r1, r0
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_RCC_ClockConfig+0x20c>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_RCC_ClockConfig+0x210>)
 800128e:	5cd3      	ldrb	r3, [r2, r3]
 8001290:	fa21 f303 	lsr.w	r3, r1, r3
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_RCC_ClockConfig+0x214>)
 8001296:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001298:	2000      	movs	r0, #0
 800129a:	f7fe ff6d 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40022000 	.word	0x40022000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	080035cc 	.word	0x080035cc
 80012b4:	20000008 	.word	0x20000008

080012b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b8:	b490      	push	{r4, r7}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012c0:	1d3c      	adds	r4, r7, #4
 80012c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <HAL_RCC_GetSysClockFreq+0xb4>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d002      	beq.n	80012f8 <HAL_RCC_GetSysClockFreq+0x40>
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d003      	beq.n	80012fe <HAL_RCC_GetSysClockFreq+0x46>
 80012f6:	e02d      	b.n	8001354 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012fa:	623b      	str	r3, [r7, #32]
      break;
 80012fc:	e02d      	b.n	800135a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800130a:	4413      	add	r3, r2
 800130c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001310:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_RCC_GetSysClockFreq+0xb8>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	0c5b      	lsrs	r3, r3, #17
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800132a:	4413      	add	r3, r2
 800132c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001330:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001336:	fb02 f203 	mul.w	r2, r2, r3
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
 8001342:	e004      	b.n	800134e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	623b      	str	r3, [r7, #32]
      break;
 8001352:	e002      	b.n	800135a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001356:	623b      	str	r3, [r7, #32]
      break;
 8001358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800135a:	6a3b      	ldr	r3, [r7, #32]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bc90      	pop	{r4, r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	080035b8 	.word	0x080035b8
 800136c:	080035c8 	.word	0x080035c8
 8001370:	40021000 	.word	0x40021000
 8001374:	007a1200 	.word	0x007a1200
 8001378:	003d0900 	.word	0x003d0900

0800137c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <HAL_RCC_GetHCLKFreq+0x10>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000008 	.word	0x20000008

08001390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001394:	f7ff fff2 	bl	800137c <HAL_RCC_GetHCLKFreq>
 8001398:	4601      	mov	r1, r0
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80013ac:	4618      	mov	r0, r3
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	080035dc 	.word	0x080035dc

080013b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013bc:	f7ff ffde 	bl	800137c <HAL_RCC_GetHCLKFreq>
 80013c0:	4601      	mov	r1, r0
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	0adb      	lsrs	r3, r3, #11
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	080035dc 	.word	0x080035dc

080013e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <RCC_Delay+0x34>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <RCC_Delay+0x38>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0a5b      	lsrs	r3, r3, #9
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80013fc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1e5a      	subs	r2, r3, #1
 8001402:	60fa      	str	r2, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f9      	bne.n	80013fc <RCC_Delay+0x1c>
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008
 8001418:	10624dd3 	.word	0x10624dd3

0800141c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_SPI_TransmitReceive_DMA+0x28>
 8001440:	2302      	movs	r3, #2
 8001442:	e0c4      	b.n	80015ce <HAL_SPI_TransmitReceive_DMA+0x1b2>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmp  = hspi->State;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001452:	b2db      	uxtb	r3, r3
 8001454:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	617b      	str	r3, [r7, #20]
  if(!((tmp == HAL_SPI_STATE_READY) ||
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d00d      	beq.n	800147e <HAL_SPI_TransmitReceive_DMA+0x62>
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001468:	d106      	bne.n	8001478 <HAL_SPI_TransmitReceive_DMA+0x5c>
      ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <HAL_SPI_TransmitReceive_DMA+0x5c>
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d002      	beq.n	800147e <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 8001478:	2302      	movs	r3, #2
 800147a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800147c:	e0a2      	b.n	80015c4 <HAL_SPI_TransmitReceive_DMA+0x1a8>
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_SPI_TransmitReceive_DMA+0x74>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <HAL_SPI_TransmitReceive_DMA+0x74>
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <HAL_SPI_TransmitReceive_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001494:	e096      	b.n	80015c4 <HAL_SPI_TransmitReceive_DMA+0x1a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d103      	bne.n	80014aa <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2205      	movs	r2, #5
 80014a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	887a      	ldrh	r2, [r7, #2]
 80014ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t*)pRxData;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	887a      	ldrh	r2, [r7, #2]
 80014d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d108      	bne.n	80014fe <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	4a39      	ldr	r2, [pc, #228]	; (80015d8 <HAL_SPI_TransmitReceive_DMA+0x1bc>)
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	4a38      	ldr	r2, [pc, #224]	; (80015dc <HAL_SPI_TransmitReceive_DMA+0x1c0>)
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
 80014fc:	e007      	b.n	800150e <HAL_SPI_TransmitReceive_DMA+0xf2>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a37      	ldr	r2, [pc, #220]	; (80015e0 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a36      	ldr	r2, [pc, #216]	; (80015e4 <HAL_SPI_TransmitReceive_DMA+0x1c8>)
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a35      	ldr	r2, [pc, #212]	; (80015e8 <HAL_SPI_TransmitReceive_DMA+0x1cc>)
 8001514:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	2200      	movs	r2, #0
 800151c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	330c      	adds	r3, #12
 8001528:	4619      	mov	r1, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001534:	b29b      	uxth	r3, r3
 8001536:	f7fe ffcf 	bl	80004d8 <HAL_DMA_Start_IT>

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154e:	2200      	movs	r2, #0
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	2200      	movs	r2, #0
 8001558:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155e:	2200      	movs	r2, #0
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001566:	2200      	movs	r2, #0
 8001568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4619      	mov	r1, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	330c      	adds	r3, #12
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001580:	b29b      	uxth	r3, r3
 8001582:	f7fe ffa9 	bl	80004d8 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001590:	2b40      	cmp	r3, #64	; 0x40
 8001592:	d007      	beq.n	80015a4 <HAL_SPI_TransmitReceive_DMA+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0220 	orr.w	r2, r2, #32
 80015b2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0202 	orr.w	r2, r2, #2
 80015c2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	080018c7 	.word	0x080018c7
 80015dc:	080017c1 	.word	0x080017c1
 80015e0:	080018e3 	.word	0x080018e3
 80015e4:	08001845 	.word	0x08001845
 80015e8:	080018ff 	.word	0x080018ff

080015ec <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10e      	bne.n	800162c <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001614:	2b00      	cmp	r3, #0
 8001616:	d009      	beq.n	800162c <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	4798      	blx	r3
    return;
 800162a:	e09f      	b.n	800176c <HAL_SPI_IRQHandler+0x180>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d009      	beq.n	800164a <HAL_SPI_IRQHandler+0x5e>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
    return;
 8001648:	e090      	b.n	800176c <HAL_SPI_IRQHandler+0x180>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 808b 	beq.w	800176c <HAL_SPI_IRQHandler+0x180>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 8085 	beq.w	800176c <HAL_SPI_IRQHandler+0x180>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d023      	beq.n	80016b4 <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d011      	beq.n	800169c <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167c:	f043 0204 	orr.w	r2, r3, #4
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	e00b      	b.n	80016b4 <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
        return;
 80016b2:	e05b      	b.n	800176c <HAL_SPI_IRQHandler+0x180>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d014      	beq.n	80016e8 <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d03c      	beq.n	800176a <HAL_SPI_IRQHandler+0x17e>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80016fe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d104      	bne.n	800171c <HAL_SPI_IRQHandler+0x130>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d022      	beq.n	8001762 <HAL_SPI_IRQHandler+0x176>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0203 	bic.w	r2, r2, #3
 800172a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_SPI_IRQHandler+0x15a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001738:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_SPI_IRQHandler+0x188>)
 800173a:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ff29 	bl	8000598 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00c      	beq.n	8001768 <HAL_SPI_IRQHandler+0x17c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_SPI_IRQHandler+0x188>)
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ff1c 	bl	8000598 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8001760:	e002      	b.n	8001768 <HAL_SPI_IRQHandler+0x17c>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f823 	bl	80017ae <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8001768:	bf00      	nop
 800176a:	bf00      	nop
  }
}
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	0800193f 	.word	0x0800193f

08001778 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
  */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
  */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
  */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
#endif /* USE_SPI_CRC */
 
  if((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	2b20      	cmp	r3, #32
 80017da:	d02d      	beq.n	8001838 <SPI_DMAReceiveCplt+0x78>
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0203 	bic.w	r2, r2, #3
 80017ea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017f4:	d111      	bne.n	800181a <SPI_DMAReceiveCplt+0x5a>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017fe:	d004      	beq.n	800180a <SPI_DMAReceiveCplt+0x4a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001808:	d107      	bne.n	800181a <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001818:	601a      	str	r2, [r3, #0]
    }

    hspi->RxXferCount = 0U;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <SPI_DMAReceiveCplt+0x78>
    {
      HAL_SPI_ErrorCallback(hspi);
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff ffbc 	bl	80017ae <HAL_SPI_ErrorCallback>
      return;
 8001836:	e002      	b.n	800183e <SPI_DMAReceiveCplt+0x7e>
    }
  }
  HAL_SPI_RxCpltCallback(hspi);
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f7ff ff9d 	bl	8001778 <HAL_SPI_RxCpltCallback>
}
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
#if (USE_SPI_CRC != 0U)
  __IO int16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001856:	f7fe fcd1 	bl	80001fc <HAL_GetTick>
 800185a:	60b8      	str	r0, [r7, #8]

  if((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	2b20      	cmp	r3, #32
 8001868:	d027      	beq.n	80018ba <SPI_DMATransmitReceiveCplt+0x76>
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */
    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	2164      	movs	r1, #100	; 0x64
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f8e2 	bl	8001a38 <SPI_CheckFlag_BSY>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <SPI_DMATransmitReceiveCplt+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f043 0220 	orr.w	r2, r3, #32
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0203 	bic.w	r2, r2, #3
 8001894:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <SPI_DMATransmitReceiveCplt+0x76>
    {
      HAL_SPI_ErrorCallback(hspi);
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff ff7b 	bl	80017ae <HAL_SPI_ErrorCallback>
      return;
 80018b8:	e002      	b.n	80018c0 <SPI_DMATransmitReceiveCplt+0x7c>
    }
  }
  HAL_SPI_TxRxCpltCallback(hspi);
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f001 faac 	bl	8002e18 <HAL_SPI_TxRxCpltCallback>
}
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	60fb      	str	r3, [r7, #12]

  HAL_SPI_RxHalfCpltCallback(hspi);
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff ff58 	bl	800178a <HAL_SPI_RxHalfCpltCallback>
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	60fb      	str	r3, [r7, #12]

  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff ff53 	bl	800179c <HAL_SPI_TxRxHalfCpltCallback>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	60fb      	str	r3, [r7, #12]

/* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0203 	bic.w	r2, r2, #3
 800191a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001920:	f043 0210 	orr.w	r2, r3, #16
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff ff3c 	bl	80017ae <HAL_SPI_ErrorCallback>
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff ff28 	bl	80017ae <HAL_SPI_ErrorCallback>
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001974:	e04d      	b.n	8001a12 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d049      	beq.n	8001a12 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001984:	f7fe fc3a 	bl	80001fc <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d83e      	bhi.n	8001a12 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80019a2:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019ac:	d111      	bne.n	80019d2 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b6:	d004      	beq.n	80019c2 <SPI_WaitFlagStateUntilTimeout+0x5c>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c0:	d107      	bne.n	80019d2 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019da:	d110      	bne.n	80019fe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6819      	ldr	r1, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80019ea:	400b      	ands	r3, r1
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e00e      	b.n	8001a30 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d101      	bne.n	8001a26 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8001a22:	2201      	movs	r2, #1
 8001a24:	e000      	b.n	8001a28 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8001a26:	2200      	movs	r2, #0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d1a3      	bne.n	8001976 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f7ff ff89 	bl	8001966 <SPI_WaitFlagStateUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5e:	f043 0220 	orr.w	r2, r3, #32
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e000      	b.n	8001a6c <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e057      	b.n	8001b36 <HAL_SPI_Init+0xc2>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f001 faad 	bl	8002ff8 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ab4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	ea42 0103 	orr.w	r1, r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	f003 0104 	and.w	r1, r3, #4
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b14:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	69da      	ldr	r2, [r3, #28]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b24:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e03f      	b.n	8001bd0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d106      	bne.n	8001b6a <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f001 faef 	bl	8003148 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2224      	movs	r2, #36	; 0x24
 8001b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b80:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fae4 	bl	8002150 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ba6:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bb6:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	d130      	bne.n	8001c54 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL) || (Size == 0U)) 
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <HAL_UART_Transmit_IT+0x26>
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e029      	b.n	8001c56 <HAL_UART_Transmit_IT+0x7e>
    }
    /* Process Locked */
    __HAL_LOCK(huart);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_UART_Transmit_IT+0x38>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e022      	b.n	8001c56 <HAL_UART_Transmit_IT+0x7e>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2221      	movs	r2, #33	; 0x21
 8001c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c4e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d140      	bne.n	8001cfc <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_UART_Receive_IT+0x26>
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e039      	b.n	8001cfe <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_UART_Receive_IT+0x38>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e032      	b.n	8001cfe <HAL_UART_Receive_IT+0x9e>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	88fa      	ldrh	r2, [r7, #6]
 8001caa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	88fa      	ldrh	r2, [r7, #6]
 8001cb0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2222      	movs	r2, #34	; 0x22
 8001cbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e000      	b.n	8001cfe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
  }
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10d      	bne.n	8001d5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_UART_IRQHandler+0x52>
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f97b 	bl	800204e <UART_Receive_IT>
      return;
 8001d58:	e0cc      	b.n	8001ef4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80ab 	beq.w	8001eb8 <HAL_UART_IRQHandler+0x1b0>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_UART_IRQHandler+0x70>
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80a0 	beq.w	8001eb8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_UART_IRQHandler+0x90>
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00a      	beq.n	8001db8 <HAL_UART_IRQHandler+0xb0>
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db0:	f043 0202 	orr.w	r2, r3, #2
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_UART_IRQHandler+0xd0>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd0:	f043 0204 	orr.w	r2, r3, #4
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_UART_IRQHandler+0xf0>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	f043 0208 	orr.w	r2, r3, #8
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d078      	beq.n	8001ef2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_UART_IRQHandler+0x112>
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f91a 	bl	800204e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <HAL_UART_IRQHandler+0x13a>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d031      	beq.n	8001ea6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f865 	bl	8001f12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d023      	beq.n	8001e9e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e64:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d013      	beq.n	8001e96 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e72:	4a22      	ldr	r2, [pc, #136]	; (8001efc <HAL_UART_IRQHandler+0x1f4>)
 8001e74:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb8c 	bl	8000598 <HAL_DMA_Abort_IT>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d016      	beq.n	8001eb4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e90:	4610      	mov	r0, r2
 8001e92:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e94:	e00e      	b.n	8001eb4 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f832 	bl	8001f00 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e9c:	e00a      	b.n	8001eb4 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f82e 	bl	8001f00 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea4:	e006      	b.n	8001eb4 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f82a 	bl	8001f00 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001eb2:	e01e      	b.n	8001ef2 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb4:	bf00      	nop
    return;
 8001eb6:	e01c      	b.n	8001ef2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_UART_IRQHandler+0x1cc>
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f851 	bl	8001f74 <UART_Transmit_IT>
    return;
 8001ed2:	e00f      	b.n	8001ef4 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HAL_UART_IRQHandler+0x1ec>
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f898 	bl	800201e <UART_EndTransmit_IT>
    return;
 8001eee:	bf00      	nop
 8001ef0:	e000      	b.n	8001ef4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001ef2:	bf00      	nop
  }
}
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	08001f4d 	.word	0x08001f4d

08001f00 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f28:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff ffca 	bl	8001f00 <HAL_UART_ErrorCallback>
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b21      	cmp	r3, #33	; 0x21
 8001f86:	d144      	bne.n	8002012 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f90:	d11a      	bne.n	8001fc8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fa6:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	1c9a      	adds	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	621a      	str	r2, [r3, #32]
 8001fba:	e00e      	b.n	8001fda <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	621a      	str	r2, [r3, #32]
 8001fc6:	e008      	b.n	8001fda <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	1c59      	adds	r1, r3, #1
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6211      	str	r1, [r2, #32]
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10f      	bne.n	800200e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ffc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800200c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	e000      	b.n	8002014 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002012:	2302      	movs	r3, #2
  }
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002034:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 ff06 	bl	8002e50 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b22      	cmp	r3, #34	; 0x22
 8002060:	d171      	bne.n	8002146 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206a:	d123      	bne.n	80020b4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10e      	bne.n	8002098 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	b29b      	uxth	r3, r3
 8002082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	1c9a      	adds	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
 8002096:	e029      	b.n	80020ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28
 80020b2:	e01b      	b.n	80020ec <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10a      	bne.n	80020d2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6858      	ldr	r0, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	1c59      	adds	r1, r3, #1
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6291      	str	r1, [r2, #40]	; 0x28
 80020cc:	b2c2      	uxtb	r2, r0
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e00c      	b.n	80020ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	1c58      	adds	r0, r3, #1
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	6288      	str	r0, [r1, #40]	; 0x28
 80020e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4619      	mov	r1, r3
 80020fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d120      	bne.n	8002142 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0220 	bic.w	r2, r2, #32
 800210e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800211e:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fedd 	bl	8002ef8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e002      	b.n	8002148 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002146:	2302      	movs	r3, #2
  }
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002192:	f023 030c 	bic.w	r3, r3, #12
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	68f9      	ldr	r1, [r7, #12]
 800219c:	430b      	orrs	r3, r1
 800219e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6f      	ldr	r2, [pc, #444]	; (8002378 <UART_SetConfig+0x228>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d16b      	bne.n	8002298 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80021c0:	f7ff f8fa 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009a      	lsls	r2, r3, #2
 80021ce:	441a      	add	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4a68      	ldr	r2, [pc, #416]	; (800237c <UART_SetConfig+0x22c>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	011c      	lsls	r4, r3, #4
 80021e4:	f7ff f8e8 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	009a      	lsls	r2, r3, #2
 80021f2:	441a      	add	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	fbb2 f5f3 	udiv	r5, r2, r3
 80021fe:	f7ff f8db 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8002202:	4602      	mov	r2, r0
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	009a      	lsls	r2, r3, #2
 800220c:	441a      	add	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	fbb2 f3f3 	udiv	r3, r2, r3
 8002218:	4a58      	ldr	r2, [pc, #352]	; (800237c <UART_SetConfig+0x22c>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2264      	movs	r2, #100	; 0x64
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	1aeb      	subs	r3, r5, r3
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	3332      	adds	r3, #50	; 0x32
 800222c:	4a53      	ldr	r2, [pc, #332]	; (800237c <UART_SetConfig+0x22c>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002238:	441c      	add	r4, r3
 800223a:	f7ff f8bd 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 800223e:	4602      	mov	r2, r0
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	009a      	lsls	r2, r3, #2
 8002248:	441a      	add	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	fbb2 f5f3 	udiv	r5, r2, r3
 8002254:	f7ff f8b0 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8002258:	4602      	mov	r2, r0
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	009a      	lsls	r2, r3, #2
 8002262:	441a      	add	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4a43      	ldr	r2, [pc, #268]	; (800237c <UART_SetConfig+0x22c>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	2264      	movs	r2, #100	; 0x64
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	1aeb      	subs	r3, r5, r3
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	3332      	adds	r3, #50	; 0x32
 8002282:	4a3e      	ldr	r2, [pc, #248]	; (800237c <UART_SetConfig+0x22c>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	f003 020f 	and.w	r2, r3, #15
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4422      	add	r2, r4
 8002294:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002296:	e06a      	b.n	800236e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002298:	f7ff f87a 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 800229c:	4602      	mov	r2, r0
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	009a      	lsls	r2, r3, #2
 80022a6:	441a      	add	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4a32      	ldr	r2, [pc, #200]	; (800237c <UART_SetConfig+0x22c>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	011c      	lsls	r4, r3, #4
 80022bc:	f7ff f868 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	009a      	lsls	r2, r3, #2
 80022ca:	441a      	add	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80022d6:	f7ff f85b 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	441a      	add	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	4a22      	ldr	r2, [pc, #136]	; (800237c <UART_SetConfig+0x22c>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2264      	movs	r2, #100	; 0x64
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	1aeb      	subs	r3, r5, r3
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	3332      	adds	r3, #50	; 0x32
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <UART_SetConfig+0x22c>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002310:	441c      	add	r4, r3
 8002312:	f7ff f83d 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8002316:	4602      	mov	r2, r0
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	009a      	lsls	r2, r3, #2
 8002320:	441a      	add	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fbb2 f5f3 	udiv	r5, r2, r3
 800232c:	f7ff f830 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8002330:	4602      	mov	r2, r0
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	009a      	lsls	r2, r3, #2
 800233a:	441a      	add	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	4a0d      	ldr	r2, [pc, #52]	; (800237c <UART_SetConfig+0x22c>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	2264      	movs	r2, #100	; 0x64
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	1aeb      	subs	r3, r5, r3
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	3332      	adds	r3, #50	; 0x32
 800235a:	4a08      	ldr	r2, [pc, #32]	; (800237c <UART_SetConfig+0x22c>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	f003 020f 	and.w	r2, r3, #15
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4422      	add	r2, r4
 800236c:	609a      	str	r2, [r3, #8]
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bdb0      	pop	{r4, r5, r7, pc}
 8002376:	bf00      	nop
 8002378:	40013800 	.word	0x40013800
 800237c:	51eb851f 	.word	0x51eb851f

08002380 <BUF1_SndBuf_Put>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void BUF1_SndBuf_Put (TUINT8 u8Data)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
  buf1_au8SndBuf[buf1_u16SndBuf_Tail++] = u8Data;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <BUF1_SndBuf_Put+0x38>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	b291      	uxth	r1, r2
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <BUF1_SndBuf_Put+0x38>)
 8002394:	8011      	strh	r1, [r2, #0]
 8002396:	4619      	mov	r1, r3
 8002398:	4a08      	ldr	r2, [pc, #32]	; (80023bc <BUF1_SndBuf_Put+0x3c>)
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	5453      	strb	r3, [r2, r1]
  if (buf1_u16SndBuf_Tail > BUF1_SNDLEN) buf1_u16SndBuf_Tail = 0;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <BUF1_SndBuf_Put+0x38>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a6:	d902      	bls.n	80023ae <BUF1_SndBuf_Put+0x2e>
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <BUF1_SndBuf_Put+0x38>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	801a      	strh	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	2000002a 	.word	0x2000002a
 80023bc:	2000004c 	.word	0x2000004c

080023c0 <BUF1_u8SndBuf_Get>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF1_u8SndBuf_Get (void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
  TUINT8 u8Data = buf1_au8SndBuf[buf1_u16SndBuf_Head++];
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <BUF1_u8SndBuf_Get+0x38>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	b291      	uxth	r1, r2
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <BUF1_u8SndBuf_Get+0x38>)
 80023d0:	8011      	strh	r1, [r2, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <BUF1_u8SndBuf_Get+0x3c>)
 80023d6:	5c9b      	ldrb	r3, [r3, r2]
 80023d8:	71fb      	strb	r3, [r7, #7]
  if (buf1_u16SndBuf_Head > BUF1_SNDLEN) buf1_u16SndBuf_Head = 0;
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <BUF1_u8SndBuf_Get+0x38>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e2:	d902      	bls.n	80023ea <BUF1_u8SndBuf_Get+0x2a>
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <BUF1_u8SndBuf_Get+0x38>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	801a      	strh	r2, [r3, #0]
  return u8Data;
 80023ea:	79fb      	ldrb	r3, [r7, #7]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000028 	.word	0x20000028
 80023fc:	2000004c 	.word	0x2000004c

08002400 <BUF1_u8SndBuf_Empty>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF1_u8SndBuf_Empty (void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return buf1_u16SndBuf_Head == buf1_u16SndBuf_Tail;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <BUF1_u8SndBuf_Empty+0x20>)
 8002406:	881a      	ldrh	r2, [r3, #0]
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <BUF1_u8SndBuf_Empty+0x24>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000028 	.word	0x20000028
 8002424:	2000002a 	.word	0x2000002a

08002428 <BUF1_RecBuf_Put>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void BUF1_RecBuf_Put (TUINT8 u8Data)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  buf1_au8RecBuf[buf1_u16RecBuf_Tail++] = u8Data;
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <BUF1_RecBuf_Put+0x38>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	b291      	uxth	r1, r2
 800243a:	4a09      	ldr	r2, [pc, #36]	; (8002460 <BUF1_RecBuf_Put+0x38>)
 800243c:	8011      	strh	r1, [r2, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	4a08      	ldr	r2, [pc, #32]	; (8002464 <BUF1_RecBuf_Put+0x3c>)
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	5453      	strb	r3, [r2, r1]
  if (buf1_u16RecBuf_Tail > BUF1_RECLEN) buf1_u16RecBuf_Tail = 0;
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <BUF1_RecBuf_Put+0x38>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244e:	d902      	bls.n	8002456 <BUF1_RecBuf_Put+0x2e>
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <BUF1_RecBuf_Put+0x38>)
 8002452:	2200      	movs	r2, #0
 8002454:	801a      	strh	r2, [r3, #0]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	2000002e 	.word	0x2000002e
 8002464:	20000450 	.word	0x20000450

08002468 <BUF1_u8RecBuf_Get>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF1_u8RecBuf_Get (void)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
  TUINT8 u8Data = buf1_au8RecBuf[buf1_u16RecBuf_Head++];
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <BUF1_u8RecBuf_Get+0x38>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	b291      	uxth	r1, r2
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <BUF1_u8RecBuf_Get+0x38>)
 8002478:	8011      	strh	r1, [r2, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <BUF1_u8RecBuf_Get+0x3c>)
 800247e:	5c9b      	ldrb	r3, [r3, r2]
 8002480:	71fb      	strb	r3, [r7, #7]
  if (buf1_u16RecBuf_Head > BUF1_RECLEN) buf1_u16RecBuf_Head = 0;
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <BUF1_u8RecBuf_Get+0x38>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800248a:	d902      	bls.n	8002492 <BUF1_u8RecBuf_Get+0x2a>
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <BUF1_u8RecBuf_Get+0x38>)
 800248e:	2200      	movs	r2, #0
 8002490:	801a      	strh	r2, [r3, #0]
  return u8Data;
 8002492:	79fb      	ldrb	r3, [r7, #7]
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	2000002c 	.word	0x2000002c
 80024a4:	20000450 	.word	0x20000450

080024a8 <BUF1_u8RecBuf_Empty>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF1_u8RecBuf_Empty (void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return buf1_u16RecBuf_Head == buf1_u16RecBuf_Tail;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <BUF1_u8RecBuf_Empty+0x20>)
 80024ae:	881a      	ldrh	r2, [r3, #0]
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <BUF1_u8RecBuf_Empty+0x24>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	2000002c 	.word	0x2000002c
 80024cc:	2000002e 	.word	0x2000002e

080024d0 <BUF2_SndBuf_Put>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void BUF2_SndBuf_Put (TUINT8 u8Data)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  buf2_au8SndBuf[buf2_u16SndBuf_Tail++] = u8Data;
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <BUF2_SndBuf_Put+0x38>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	b291      	uxth	r1, r2
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <BUF2_SndBuf_Put+0x38>)
 80024e4:	8011      	strh	r1, [r2, #0]
 80024e6:	4619      	mov	r1, r3
 80024e8:	4a08      	ldr	r2, [pc, #32]	; (800250c <BUF2_SndBuf_Put+0x3c>)
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	5453      	strb	r3, [r2, r1]
  if (buf2_u16SndBuf_Tail > BUF2_SNDLEN) buf2_u16SndBuf_Tail = 0;
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <BUF2_SndBuf_Put+0x38>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f6:	d902      	bls.n	80024fe <BUF2_SndBuf_Put+0x2e>
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <BUF2_SndBuf_Put+0x38>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	801a      	strh	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	20000032 	.word	0x20000032
 800250c:	20000c58 	.word	0x20000c58

08002510 <BUF2_u8SndBuf_Get>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF2_u8SndBuf_Get (void)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
  TUINT8 u8Data = buf2_au8SndBuf[buf2_u16SndBuf_Head++];
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <BUF2_u8SndBuf_Get+0x38>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	b291      	uxth	r1, r2
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <BUF2_u8SndBuf_Get+0x38>)
 8002520:	8011      	strh	r1, [r2, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <BUF2_u8SndBuf_Get+0x3c>)
 8002526:	5c9b      	ldrb	r3, [r3, r2]
 8002528:	71fb      	strb	r3, [r7, #7]
  if (buf2_u16SndBuf_Head > BUF2_SNDLEN) buf2_u16SndBuf_Head = 0;
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <BUF2_u8SndBuf_Get+0x38>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002532:	d902      	bls.n	800253a <BUF2_u8SndBuf_Get+0x2a>
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <BUF2_u8SndBuf_Get+0x38>)
 8002536:	2200      	movs	r2, #0
 8002538:	801a      	strh	r2, [r3, #0]
  return u8Data;
 800253a:	79fb      	ldrb	r3, [r7, #7]
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20000030 	.word	0x20000030
 800254c:	20000c58 	.word	0x20000c58

08002550 <BUF2_u8SndBuf_Empty>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF2_u8SndBuf_Empty (void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return buf2_u16SndBuf_Head == buf2_u16SndBuf_Tail;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <BUF2_u8SndBuf_Empty+0x20>)
 8002556:	881a      	ldrh	r2, [r3, #0]
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <BUF2_u8SndBuf_Empty+0x24>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000030 	.word	0x20000030
 8002574:	20000032 	.word	0x20000032

08002578 <BUF2_RecBuf_Put>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void BUF2_RecBuf_Put (TUINT8 u8Data)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  buf2_au8RecBuf[buf2_u16RecBuf_Tail++] = u8Data;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <BUF2_RecBuf_Put+0x38>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	b291      	uxth	r1, r2
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <BUF2_RecBuf_Put+0x38>)
 800258c:	8011      	strh	r1, [r2, #0]
 800258e:	4619      	mov	r1, r3
 8002590:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <BUF2_RecBuf_Put+0x3c>)
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	5453      	strb	r3, [r2, r1]
  if (buf2_u16RecBuf_Tail > BUF2_RECLEN) buf2_u16RecBuf_Tail = 0;
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <BUF2_RecBuf_Put+0x38>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d902      	bls.n	80025a6 <BUF2_RecBuf_Put+0x2e>
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <BUF2_RecBuf_Put+0x38>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	801a      	strh	r2, [r3, #0]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000036 	.word	0x20000036
 80025b4:	20000854 	.word	0x20000854

080025b8 <BUF2_u8RecBuf_Get>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF2_u8RecBuf_Get (void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
  TUINT8 u8Data = buf2_au8RecBuf[buf2_u16RecBuf_Head++];
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <BUF2_u8RecBuf_Get+0x38>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	b291      	uxth	r1, r2
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <BUF2_u8RecBuf_Get+0x38>)
 80025c8:	8011      	strh	r1, [r2, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <BUF2_u8RecBuf_Get+0x3c>)
 80025ce:	5c9b      	ldrb	r3, [r3, r2]
 80025d0:	71fb      	strb	r3, [r7, #7]
  if (buf2_u16RecBuf_Head > BUF2_RECLEN) buf2_u16RecBuf_Head = 0;
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <BUF2_u8RecBuf_Get+0x38>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025da:	d902      	bls.n	80025e2 <BUF2_u8RecBuf_Get+0x2a>
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <BUF2_u8RecBuf_Get+0x38>)
 80025de:	2200      	movs	r2, #0
 80025e0:	801a      	strh	r2, [r3, #0]
  return u8Data;
 80025e2:	79fb      	ldrb	r3, [r7, #7]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000034 	.word	0x20000034
 80025f4:	20000854 	.word	0x20000854

080025f8 <BUF2_u8RecBuf_Empty>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF2_u8RecBuf_Empty (void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return buf2_u16RecBuf_Head == buf2_u16RecBuf_Tail;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <BUF2_u8RecBuf_Empty+0x20>)
 80025fe:	881a      	ldrh	r2, [r3, #0]
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <BUF2_u8RecBuf_Empty+0x24>)
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000034 	.word	0x20000034
 800261c:	20000036 	.word	0x20000036

08002620 <BUF3_SndBuf_Put>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void BUF3_SndBuf_Put (TUINT8 u8Data)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  buf3_au8SndBuf[buf3_u16SndBuf_Tail++] = u8Data;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <BUF3_SndBuf_Put+0x38>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	b291      	uxth	r1, r2
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <BUF3_SndBuf_Put+0x38>)
 8002634:	8011      	strh	r1, [r2, #0]
 8002636:	4619      	mov	r1, r3
 8002638:	4a08      	ldr	r2, [pc, #32]	; (800265c <BUF3_SndBuf_Put+0x3c>)
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	5453      	strb	r3, [r2, r1]
  if (buf3_u16SndBuf_Tail > BUF3_SNDLEN) buf3_u16SndBuf_Tail = 0;
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <BUF3_SndBuf_Put+0x38>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002646:	d902      	bls.n	800264e <BUF3_SndBuf_Put+0x2e>
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <BUF3_SndBuf_Put+0x38>)
 800264a:	2200      	movs	r2, #0
 800264c:	801a      	strh	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	2000003a 	.word	0x2000003a
 800265c:	20001460 	.word	0x20001460

08002660 <BUF3_u8SndBuf_Get>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF3_u8SndBuf_Get (void)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
  TUINT8 u8Data = buf3_au8SndBuf[buf3_u16SndBuf_Head++];
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <BUF3_u8SndBuf_Get+0x38>)
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	b291      	uxth	r1, r2
 800266e:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <BUF3_u8SndBuf_Get+0x38>)
 8002670:	8011      	strh	r1, [r2, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <BUF3_u8SndBuf_Get+0x3c>)
 8002676:	5c9b      	ldrb	r3, [r3, r2]
 8002678:	71fb      	strb	r3, [r7, #7]
  if (buf3_u16SndBuf_Head > BUF3_SNDLEN) buf3_u16SndBuf_Head = 0;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <BUF3_u8SndBuf_Get+0x38>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002682:	d902      	bls.n	800268a <BUF3_u8SndBuf_Get+0x2a>
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <BUF3_u8SndBuf_Get+0x38>)
 8002686:	2200      	movs	r2, #0
 8002688:	801a      	strh	r2, [r3, #0]
  return u8Data;
 800268a:	79fb      	ldrb	r3, [r7, #7]
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000038 	.word	0x20000038
 800269c:	20001460 	.word	0x20001460

080026a0 <BUF3_u8SndBuf_Empty>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF3_u8SndBuf_Empty (void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return buf3_u16SndBuf_Head == buf3_u16SndBuf_Tail;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <BUF3_u8SndBuf_Empty+0x20>)
 80026a6:	881a      	ldrh	r2, [r3, #0]
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <BUF3_u8SndBuf_Empty+0x24>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000038 	.word	0x20000038
 80026c4:	2000003a 	.word	0x2000003a

080026c8 <BUF3_RecBuf_Put>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void BUF3_RecBuf_Put (TUINT8 u8Data)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  buf3_au8RecBuf[buf3_u16RecBuf_Tail++] = u8Data;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <BUF3_RecBuf_Put+0x38>)
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	b291      	uxth	r1, r2
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <BUF3_RecBuf_Put+0x38>)
 80026dc:	8011      	strh	r1, [r2, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4a08      	ldr	r2, [pc, #32]	; (8002704 <BUF3_RecBuf_Put+0x3c>)
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	5453      	strb	r3, [r2, r1]
  if (buf3_u16RecBuf_Tail > BUF3_RECLEN) buf3_u16RecBuf_Tail = 0;
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <BUF3_RecBuf_Put+0x38>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ee:	d902      	bls.n	80026f6 <BUF3_RecBuf_Put+0x2e>
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <BUF3_RecBuf_Put+0x38>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	801a      	strh	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	2000003e 	.word	0x2000003e
 8002704:	2000105c 	.word	0x2000105c

08002708 <BUF3_u8RecBuf_Get>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF3_u8RecBuf_Get (void)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
  TUINT8 u8Data = buf3_au8RecBuf[buf3_u16RecBuf_Head++];
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <BUF3_u8RecBuf_Get+0x38>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	b291      	uxth	r1, r2
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <BUF3_u8RecBuf_Get+0x38>)
 8002718:	8011      	strh	r1, [r2, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <BUF3_u8RecBuf_Get+0x3c>)
 800271e:	5c9b      	ldrb	r3, [r3, r2]
 8002720:	71fb      	strb	r3, [r7, #7]
  if (buf3_u16RecBuf_Head > BUF3_RECLEN) buf3_u16RecBuf_Head = 0;
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <BUF3_u8RecBuf_Get+0x38>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d902      	bls.n	8002732 <BUF3_u8RecBuf_Get+0x2a>
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <BUF3_u8RecBuf_Get+0x38>)
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]
  return u8Data;
 8002732:	79fb      	ldrb	r3, [r7, #7]
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	2000003c 	.word	0x2000003c
 8002744:	2000105c 	.word	0x2000105c

08002748 <BUF3_u8RecBuf_Empty>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 BUF3_u8RecBuf_Empty (void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return buf3_u16RecBuf_Head == buf3_u16RecBuf_Tail;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <BUF3_u8RecBuf_Empty+0x20>)
 800274e:	881a      	ldrh	r2, [r3, #0]
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <BUF3_u8RecBuf_Empty+0x24>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	2000003c 	.word	0x2000003c
 800276c:	2000003e 	.word	0x2000003e

08002770 <CTL_Ini>:
*  Parameter(s)   :  
*  Return Value   :  
******************************************************************************/

void CTL_Ini (void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &BUF1_u8Buf,1);
 8002774:	2201      	movs	r2, #1
 8002776:	490d      	ldr	r1, [pc, #52]	; (80027ac <CTL_Ini+0x3c>)
 8002778:	480d      	ldr	r0, [pc, #52]	; (80027b0 <CTL_Ini+0x40>)
 800277a:	f7ff fa71 	bl	8001c60 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &BUF2_u8Buf,1);
 800277e:	2201      	movs	r2, #1
 8002780:	490c      	ldr	r1, [pc, #48]	; (80027b4 <CTL_Ini+0x44>)
 8002782:	480d      	ldr	r0, [pc, #52]	; (80027b8 <CTL_Ini+0x48>)
 8002784:	f7ff fa6c 	bl	8001c60 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &BUF3_u8Buf,1);
 8002788:	2201      	movs	r2, #1
 800278a:	490c      	ldr	r1, [pc, #48]	; (80027bc <CTL_Ini+0x4c>)
 800278c:	480c      	ldr	r0, [pc, #48]	; (80027c0 <CTL_Ini+0x50>)
 800278e:	f7ff fa67 	bl	8001c60 <HAL_UART_Receive_IT>

	//HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_TxBuf, SPI1_RxBuf, SPI1_TXRX_BUFFER_SIZE);

	memset(SPI1_TxBuf, 0, sizeof(SPI1_TxBuf));
 8002792:	220a      	movs	r2, #10
 8002794:	2100      	movs	r1, #0
 8002796:	480b      	ldr	r0, [pc, #44]	; (80027c4 <CTL_Ini+0x54>)
 8002798:	f000 fefa 	bl	8003590 <memset>
	memset(SPI1_RxBuf, 0, sizeof(SPI1_RxBuf));
 800279c:	220a      	movs	r2, #10
 800279e:	2100      	movs	r1, #0
 80027a0:	4809      	ldr	r0, [pc, #36]	; (80027c8 <CTL_Ini+0x58>)
 80027a2:	f000 fef5 	bl	8003590 <memset>
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000048 	.word	0x20000048
 80027b0:	20001970 	.word	0x20001970
 80027b4:	20000c55 	.word	0x20000c55
 80027b8:	20001a0c 	.word	0x20001a0c
 80027bc:	2000145d 	.word	0x2000145d
 80027c0:	20001864 	.word	0x20001864
 80027c4:	20001ae0 	.word	0x20001ae0
 80027c8:	20001ad4 	.word	0x20001ad4

080027cc <CTL_Main>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void CTL_Main (void)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
	if (SPI1_TxCompleted)
 80027d2:	4ba3      	ldr	r3, [pc, #652]	; (8002a60 <CTL_Main+0x294>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8180 	beq.w	8002adc <CTL_Main+0x310>
	{
		SPI1_TxCompleted = 0;
 80027dc:	4ba0      	ldr	r3, [pc, #640]	; (8002a60 <CTL_Main+0x294>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
		ctl_SPI1_TxCounter = 0;
 80027e2:	4ba0      	ldr	r3, [pc, #640]	; (8002a64 <CTL_Main+0x298>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]

		memset(SPI1_TxBuf, 0, sizeof(SPI1_TxBuf));
 80027e8:	220a      	movs	r2, #10
 80027ea:	2100      	movs	r1, #0
 80027ec:	489e      	ldr	r0, [pc, #632]	; (8002a68 <CTL_Main+0x29c>)
 80027ee:	f000 fecf 	bl	8003590 <memset>

		switch(ctl_State)
 80027f2:	4b9e      	ldr	r3, [pc, #632]	; (8002a6c <CTL_Main+0x2a0>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d04d      	beq.n	8002896 <CTL_Main+0xca>
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	f000 8093 	beq.w	8002926 <CTL_Main+0x15a>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d000      	beq.n	8002806 <CTL_Main+0x3a>

								ctl_State = CTL_USART1;

								break;

			default:			break;
 8002804:	e0d7      	b.n	80029b6 <CTL_Main+0x1ea>
			case CTL_USART1:	if (!BUF1_u8RecBuf_Empty())
 8002806:	f7ff fe4f 	bl	80024a8 <BUF1_u8RecBuf_Empty>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d13e      	bne.n	800288e <CTL_Main+0xc2>
									SPI1_TxBuf[ctl_SPI1_TxCounter++] = CTL_CMD_USART1_TX; // Cmd
 8002810:	4b94      	ldr	r3, [pc, #592]	; (8002a64 <CTL_Main+0x298>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	b2d1      	uxtb	r1, r2
 8002818:	4a92      	ldr	r2, [pc, #584]	; (8002a64 <CTL_Main+0x298>)
 800281a:	7011      	strb	r1, [r2, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b92      	ldr	r3, [pc, #584]	; (8002a68 <CTL_Main+0x29c>)
 8002820:	2111      	movs	r1, #17
 8002822:	5499      	strb	r1, [r3, r2]
									ctl_SPI1_TxCounter += 1; // Skip the length byte. It depends on how many byte read from queue
 8002824:	4b8f      	ldr	r3, [pc, #572]	; (8002a64 <CTL_Main+0x298>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4b8d      	ldr	r3, [pc, #564]	; (8002a64 <CTL_Main+0x298>)
 800282e:	701a      	strb	r2, [r3, #0]
									ctl_Bytes_Read_From_Queue = 0;
 8002830:	4b8f      	ldr	r3, [pc, #572]	; (8002a70 <CTL_Main+0x2a4>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
									while (!BUF1_u8RecBuf_Empty())
 8002836:	e018      	b.n	800286a <CTL_Main+0x9e>
										SPI1_TxBuf[ctl_SPI1_TxCounter] = BUF1_u8RecBuf_Get(); // Data
 8002838:	4b8a      	ldr	r3, [pc, #552]	; (8002a64 <CTL_Main+0x298>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461c      	mov	r4, r3
 800283e:	f7ff fe13 	bl	8002468 <BUF1_u8RecBuf_Get>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <CTL_Main+0x29c>)
 8002848:	551a      	strb	r2, [r3, r4]
										ctl_SPI1_TxCounter++;
 800284a:	4b86      	ldr	r3, [pc, #536]	; (8002a64 <CTL_Main+0x298>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	3301      	adds	r3, #1
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4b84      	ldr	r3, [pc, #528]	; (8002a64 <CTL_Main+0x298>)
 8002854:	701a      	strb	r2, [r3, #0]
										ctl_Bytes_Read_From_Queue++;
 8002856:	4b86      	ldr	r3, [pc, #536]	; (8002a70 <CTL_Main+0x2a4>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	3301      	adds	r3, #1
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4b84      	ldr	r3, [pc, #528]	; (8002a70 <CTL_Main+0x2a4>)
 8002860:	701a      	strb	r2, [r3, #0]
										if (ctl_SPI1_TxCounter == SPI1_TXRX_BUFFER_SIZE) break;
 8002862:	4b80      	ldr	r3, [pc, #512]	; (8002a64 <CTL_Main+0x298>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b0a      	cmp	r3, #10
 8002868:	d005      	beq.n	8002876 <CTL_Main+0xaa>
									while (!BUF1_u8RecBuf_Empty())
 800286a:	f7ff fe1d 	bl	80024a8 <BUF1_u8RecBuf_Empty>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0e1      	beq.n	8002838 <CTL_Main+0x6c>
 8002874:	e000      	b.n	8002878 <CTL_Main+0xac>
										if (ctl_SPI1_TxCounter == SPI1_TXRX_BUFFER_SIZE) break;
 8002876:	bf00      	nop
									SPI1_TxBuf[ctl_SPI1_TxCounter - ctl_Bytes_Read_From_Queue - 1] = ctl_Bytes_Read_From_Queue; // Length
 8002878:	4b7a      	ldr	r3, [pc, #488]	; (8002a64 <CTL_Main+0x298>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b7c      	ldr	r3, [pc, #496]	; (8002a70 <CTL_Main+0x2a4>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	4a7a      	ldr	r2, [pc, #488]	; (8002a70 <CTL_Main+0x2a4>)
 8002888:	7811      	ldrb	r1, [r2, #0]
 800288a:	4a77      	ldr	r2, [pc, #476]	; (8002a68 <CTL_Main+0x29c>)
 800288c:	54d1      	strb	r1, [r2, r3]
								ctl_State = CTL_USART2;
 800288e:	4b77      	ldr	r3, [pc, #476]	; (8002a6c <CTL_Main+0x2a0>)
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
								break;
 8002894:	e08f      	b.n	80029b6 <CTL_Main+0x1ea>
			case CTL_USART2:	if (!BUF2_u8RecBuf_Empty())
 8002896:	f7ff feaf 	bl	80025f8 <BUF2_u8RecBuf_Empty>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d13e      	bne.n	800291e <CTL_Main+0x152>
									SPI1_TxBuf[ctl_SPI1_TxCounter++] = CTL_CMD_USART2_TX; // Cmd
 80028a0:	4b70      	ldr	r3, [pc, #448]	; (8002a64 <CTL_Main+0x298>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	b2d1      	uxtb	r1, r2
 80028a8:	4a6e      	ldr	r2, [pc, #440]	; (8002a64 <CTL_Main+0x298>)
 80028aa:	7011      	strb	r1, [r2, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b6e      	ldr	r3, [pc, #440]	; (8002a68 <CTL_Main+0x29c>)
 80028b0:	2112      	movs	r1, #18
 80028b2:	5499      	strb	r1, [r3, r2]
									ctl_SPI1_TxCounter += 1; // Skip the length byte. It depends on how many byte read from queue
 80028b4:	4b6b      	ldr	r3, [pc, #428]	; (8002a64 <CTL_Main+0x298>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b69      	ldr	r3, [pc, #420]	; (8002a64 <CTL_Main+0x298>)
 80028be:	701a      	strb	r2, [r3, #0]
									ctl_Bytes_Read_From_Queue = 0;
 80028c0:	4b6b      	ldr	r3, [pc, #428]	; (8002a70 <CTL_Main+0x2a4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
									while (!BUF2_u8RecBuf_Empty())
 80028c6:	e018      	b.n	80028fa <CTL_Main+0x12e>
										SPI1_TxBuf[ctl_SPI1_TxCounter] = BUF2_u8RecBuf_Get(); // Data
 80028c8:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <CTL_Main+0x298>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461c      	mov	r4, r3
 80028ce:	f7ff fe73 	bl	80025b8 <BUF2_u8RecBuf_Get>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b64      	ldr	r3, [pc, #400]	; (8002a68 <CTL_Main+0x29c>)
 80028d8:	551a      	strb	r2, [r3, r4]
										ctl_SPI1_TxCounter++;
 80028da:	4b62      	ldr	r3, [pc, #392]	; (8002a64 <CTL_Main+0x298>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4b60      	ldr	r3, [pc, #384]	; (8002a64 <CTL_Main+0x298>)
 80028e4:	701a      	strb	r2, [r3, #0]
										ctl_Bytes_Read_From_Queue++;
 80028e6:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <CTL_Main+0x2a4>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4b60      	ldr	r3, [pc, #384]	; (8002a70 <CTL_Main+0x2a4>)
 80028f0:	701a      	strb	r2, [r3, #0]
										if (ctl_SPI1_TxCounter == SPI1_TXRX_BUFFER_SIZE) break;
 80028f2:	4b5c      	ldr	r3, [pc, #368]	; (8002a64 <CTL_Main+0x298>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b0a      	cmp	r3, #10
 80028f8:	d005      	beq.n	8002906 <CTL_Main+0x13a>
									while (!BUF2_u8RecBuf_Empty())
 80028fa:	f7ff fe7d 	bl	80025f8 <BUF2_u8RecBuf_Empty>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0e1      	beq.n	80028c8 <CTL_Main+0xfc>
 8002904:	e000      	b.n	8002908 <CTL_Main+0x13c>
										if (ctl_SPI1_TxCounter == SPI1_TXRX_BUFFER_SIZE) break;
 8002906:	bf00      	nop
									SPI1_TxBuf[ctl_SPI1_TxCounter - ctl_Bytes_Read_From_Queue - 1] = ctl_Bytes_Read_From_Queue; // Length
 8002908:	4b56      	ldr	r3, [pc, #344]	; (8002a64 <CTL_Main+0x298>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b58      	ldr	r3, [pc, #352]	; (8002a70 <CTL_Main+0x2a4>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	4a56      	ldr	r2, [pc, #344]	; (8002a70 <CTL_Main+0x2a4>)
 8002918:	7811      	ldrb	r1, [r2, #0]
 800291a:	4a53      	ldr	r2, [pc, #332]	; (8002a68 <CTL_Main+0x29c>)
 800291c:	54d1      	strb	r1, [r2, r3]
								ctl_State = CTL_USART3;
 800291e:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <CTL_Main+0x2a0>)
 8002920:	2202      	movs	r2, #2
 8002922:	701a      	strb	r2, [r3, #0]
								break;
 8002924:	e047      	b.n	80029b6 <CTL_Main+0x1ea>
			case CTL_USART3:	if (!BUF3_u8RecBuf_Empty())
 8002926:	f7ff ff0f 	bl	8002748 <BUF3_u8RecBuf_Empty>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d13e      	bne.n	80029ae <CTL_Main+0x1e2>
									SPI1_TxBuf[ctl_SPI1_TxCounter++] = CTL_CMD_USART3_TX; // Cmd
 8002930:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <CTL_Main+0x298>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	b2d1      	uxtb	r1, r2
 8002938:	4a4a      	ldr	r2, [pc, #296]	; (8002a64 <CTL_Main+0x298>)
 800293a:	7011      	strb	r1, [r2, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <CTL_Main+0x29c>)
 8002940:	2113      	movs	r1, #19
 8002942:	5499      	strb	r1, [r3, r2]
									ctl_SPI1_TxCounter += 1; // Skip the length byte. It depends on how many byte read from queue
 8002944:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <CTL_Main+0x298>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b45      	ldr	r3, [pc, #276]	; (8002a64 <CTL_Main+0x298>)
 800294e:	701a      	strb	r2, [r3, #0]
									ctl_Bytes_Read_From_Queue = 0;
 8002950:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <CTL_Main+0x2a4>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
									while (!BUF3_u8RecBuf_Empty())
 8002956:	e018      	b.n	800298a <CTL_Main+0x1be>
										SPI1_TxBuf[ctl_SPI1_TxCounter] = BUF3_u8RecBuf_Get(); // Data
 8002958:	4b42      	ldr	r3, [pc, #264]	; (8002a64 <CTL_Main+0x298>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461c      	mov	r4, r3
 800295e:	f7ff fed3 	bl	8002708 <BUF3_u8RecBuf_Get>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <CTL_Main+0x29c>)
 8002968:	551a      	strb	r2, [r3, r4]
										ctl_SPI1_TxCounter++;
 800296a:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <CTL_Main+0x298>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	3301      	adds	r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <CTL_Main+0x298>)
 8002974:	701a      	strb	r2, [r3, #0]
										ctl_Bytes_Read_From_Queue++;
 8002976:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <CTL_Main+0x2a4>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <CTL_Main+0x2a4>)
 8002980:	701a      	strb	r2, [r3, #0]
										if (ctl_SPI1_TxCounter == SPI1_TXRX_BUFFER_SIZE) break;
 8002982:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <CTL_Main+0x298>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b0a      	cmp	r3, #10
 8002988:	d005      	beq.n	8002996 <CTL_Main+0x1ca>
									while (!BUF3_u8RecBuf_Empty())
 800298a:	f7ff fedd 	bl	8002748 <BUF3_u8RecBuf_Empty>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0e1      	beq.n	8002958 <CTL_Main+0x18c>
 8002994:	e000      	b.n	8002998 <CTL_Main+0x1cc>
										if (ctl_SPI1_TxCounter == SPI1_TXRX_BUFFER_SIZE) break;
 8002996:	bf00      	nop
									SPI1_TxBuf[ctl_SPI1_TxCounter - ctl_Bytes_Read_From_Queue - 1] = ctl_Bytes_Read_From_Queue; // Length
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <CTL_Main+0x298>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <CTL_Main+0x2a4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	4a32      	ldr	r2, [pc, #200]	; (8002a70 <CTL_Main+0x2a4>)
 80029a8:	7811      	ldrb	r1, [r2, #0]
 80029aa:	4a2f      	ldr	r2, [pc, #188]	; (8002a68 <CTL_Main+0x29c>)
 80029ac:	54d1      	strb	r1, [r2, r3]
								ctl_State = CTL_USART1;
 80029ae:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <CTL_Main+0x2a0>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
								break;
 80029b4:	bf00      	nop
		}


		switch (SPI1_RxBuf[0])
 80029b6:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <CTL_Main+0x2a8>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b12      	cmp	r3, #18
 80029bc:	d028      	beq.n	8002a10 <CTL_Main+0x244>
 80029be:	2b13      	cmp	r3, #19
 80029c0:	d04a      	beq.n	8002a58 <CTL_Main+0x28c>
 80029c2:	2b11      	cmp	r3, #17
 80029c4:	d000      	beq.n	80029c8 <CTL_Main+0x1fc>
											HAL_UART_Transmit_IT(&huart3, &u8Temp, 1);
										}

										break;

			default: break;
 80029c6:	e083      	b.n	8002ad0 <CTL_Main+0x304>
			case CTL_CMD_USART1_TX:		for (int i = 2; i < SPI1_RxBuf[1] + 2; i++)
 80029c8:	2302      	movs	r3, #2
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e009      	b.n	80029e2 <CTL_Main+0x216>
											BUF1_SndBuf_Put(SPI1_RxBuf[i]);
 80029ce:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <CTL_Main+0x2a8>)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fcd2 	bl	8002380 <BUF1_SndBuf_Put>
			case CTL_CMD_USART1_TX:		for (int i = 2; i < SPI1_RxBuf[1] + 2; i++)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3301      	adds	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <CTL_Main+0x2a8>)
 80029e4:	785b      	ldrb	r3, [r3, #1]
 80029e6:	3302      	adds	r3, #2
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	dbef      	blt.n	80029ce <CTL_Main+0x202>
										if (!BUF1_u8SndBuf_Empty())
 80029ee:	f7ff fd07 	bl	8002400 <BUF1_u8SndBuf_Empty>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d166      	bne.n	8002ac6 <CTL_Main+0x2fa>
											u8Temp = BUF1_u8SndBuf_Get();
 80029f8:	f7ff fce2 	bl	80023c0 <BUF1_u8SndBuf_Get>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <CTL_Main+0x2ac>)
 8002a02:	701a      	strb	r2, [r3, #0]
											HAL_UART_Transmit_IT(&huart1, &u8Temp, 1);
 8002a04:	2201      	movs	r2, #1
 8002a06:	491c      	ldr	r1, [pc, #112]	; (8002a78 <CTL_Main+0x2ac>)
 8002a08:	481c      	ldr	r0, [pc, #112]	; (8002a7c <CTL_Main+0x2b0>)
 8002a0a:	f7ff f8e5 	bl	8001bd8 <HAL_UART_Transmit_IT>
										break;
 8002a0e:	e05a      	b.n	8002ac6 <CTL_Main+0x2fa>
			case CTL_CMD_USART2_TX:		for (int i = 2; i < SPI1_RxBuf[1] + 2; i++)
 8002a10:	2302      	movs	r3, #2
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	e009      	b.n	8002a2a <CTL_Main+0x25e>
											BUF2_SndBuf_Put(SPI1_RxBuf[i]);
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <CTL_Main+0x2a8>)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fd56 	bl	80024d0 <BUF2_SndBuf_Put>
			case CTL_CMD_USART2_TX:		for (int i = 2; i < SPI1_RxBuf[1] + 2; i++)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	3301      	adds	r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <CTL_Main+0x2a8>)
 8002a2c:	785b      	ldrb	r3, [r3, #1]
 8002a2e:	3302      	adds	r3, #2
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	dbef      	blt.n	8002a16 <CTL_Main+0x24a>
										if (!BUF2_u8SndBuf_Empty())
 8002a36:	f7ff fd8b 	bl	8002550 <BUF2_u8SndBuf_Empty>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d144      	bne.n	8002aca <CTL_Main+0x2fe>
											u8Temp = BUF2_u8SndBuf_Get();
 8002a40:	f7ff fd66 	bl	8002510 <BUF2_u8SndBuf_Get>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <CTL_Main+0x2ac>)
 8002a4a:	701a      	strb	r2, [r3, #0]
											HAL_UART_Transmit_IT(&huart2, &u8Temp, 1);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	490a      	ldr	r1, [pc, #40]	; (8002a78 <CTL_Main+0x2ac>)
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <CTL_Main+0x2b4>)
 8002a52:	f7ff f8c1 	bl	8001bd8 <HAL_UART_Transmit_IT>
										break;
 8002a56:	e038      	b.n	8002aca <CTL_Main+0x2fe>
			case CTL_CMD_USART3_TX:		for (int i = 2; i < SPI1_RxBuf[1] + 2; i++)
 8002a58:	2302      	movs	r3, #2
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	e01c      	b.n	8002a98 <CTL_Main+0x2cc>
 8002a5e:	bf00      	nop
 8002a60:	20000005 	.word	0x20000005
 8002a64:	20000040 	.word	0x20000040
 8002a68:	20001ae0 	.word	0x20001ae0
 8002a6c:	20000042 	.word	0x20000042
 8002a70:	20000041 	.word	0x20000041
 8002a74:	20001ad4 	.word	0x20001ad4
 8002a78:	200019b0 	.word	0x200019b0
 8002a7c:	20001970 	.word	0x20001970
 8002a80:	20001a0c 	.word	0x20001a0c
											BUF3_SndBuf_Put(SPI1_RxBuf[i]);
 8002a84:	4a17      	ldr	r2, [pc, #92]	; (8002ae4 <CTL_Main+0x318>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fdc7 	bl	8002620 <BUF3_SndBuf_Put>
			case CTL_CMD_USART3_TX:		for (int i = 2; i < SPI1_RxBuf[1] + 2; i++)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3301      	adds	r3, #1
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <CTL_Main+0x318>)
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	dbef      	blt.n	8002a84 <CTL_Main+0x2b8>
										if (!BUF3_u8SndBuf_Empty())
 8002aa4:	f7ff fdfc 	bl	80026a0 <BUF3_u8SndBuf_Empty>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10f      	bne.n	8002ace <CTL_Main+0x302>
											u8Temp = BUF3_u8SndBuf_Get();
 8002aae:	f7ff fdd7 	bl	8002660 <BUF3_u8SndBuf_Get>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <CTL_Main+0x31c>)
 8002ab8:	701a      	strb	r2, [r3, #0]
											HAL_UART_Transmit_IT(&huart3, &u8Temp, 1);
 8002aba:	2201      	movs	r2, #1
 8002abc:	490a      	ldr	r1, [pc, #40]	; (8002ae8 <CTL_Main+0x31c>)
 8002abe:	480b      	ldr	r0, [pc, #44]	; (8002aec <CTL_Main+0x320>)
 8002ac0:	f7ff f88a 	bl	8001bd8 <HAL_UART_Transmit_IT>
										break;
 8002ac4:	e003      	b.n	8002ace <CTL_Main+0x302>
										break;
 8002ac6:	bf00      	nop
 8002ac8:	e002      	b.n	8002ad0 <CTL_Main+0x304>
										break;
 8002aca:	bf00      	nop
 8002acc:	e000      	b.n	8002ad0 <CTL_Main+0x304>
										break;
 8002ace:	bf00      	nop




		// Then Transmit
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_TxBuf, SPI1_RxBuf, SPI1_TXRX_BUFFER_SIZE);
 8002ad0:	230a      	movs	r3, #10
 8002ad2:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <CTL_Main+0x318>)
 8002ad4:	4906      	ldr	r1, [pc, #24]	; (8002af0 <CTL_Main+0x324>)
 8002ad6:	4807      	ldr	r0, [pc, #28]	; (8002af4 <CTL_Main+0x328>)
 8002ad8:	f7fe fca0 	bl	800141c <HAL_SPI_TransmitReceive_DMA>

	  HAL_Delay(3000);
	  */
	 // HAL_UART_Receive_IT(&huart2, rx_buff, 1);

}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd90      	pop	{r4, r7, pc}
 8002ae4:	20001ad4 	.word	0x20001ad4
 8002ae8:	200019b0 	.word	0x200019b0
 8002aec:	20001864 	.word	0x20001864
 8002af0:	20001ae0 	.word	0x20001ae0
 8002af4:	200019b4 	.word	0x200019b4

08002af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002afc:	f7fd fb26 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b00:	f000 f811 	bl	8002b26 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b04:	f000 f93c 	bl	8002d80 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b08:	f000 f904 	bl	8002d14 <MX_DMA_Init>
  MX_SPI1_Init();
 8002b0c:	f000 f850 	bl	8002bb0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002b10:	f000 f882 	bl	8002c18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002b14:	f000 f8aa 	bl	8002c6c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002b18:	f000 f8d2 	bl	8002cc0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	CTL_Ini();
 8002b1c:	f7ff fe28 	bl	8002770 <CTL_Ini>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  CTL_Main();
 8002b20:	f7ff fe54 	bl	80027cc <CTL_Main>
 8002b24:	e7fc      	b.n	8002b20 <main+0x28>

08002b26 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b090      	sub	sp, #64	; 0x40
 8002b2a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b2c:	f107 0318 	add.w	r3, r7, #24
 8002b30:	2228      	movs	r2, #40	; 0x28
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fd2b 	bl	8003590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b50:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b56:	2301      	movs	r3, #1
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b64:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b6a:	f107 0318 	add.w	r3, r7, #24
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe f832 	bl	8000bd8 <HAL_RCC_OscConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002b7a:	f000 fa05 	bl	8002f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b7e:	230f      	movs	r3, #15
 8002b80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b82:	2302      	movs	r3, #2
 8002b84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	2102      	movs	r1, #2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe fa81 	bl	80010a0 <HAL_RCC_ClockConfig>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002ba4:	f000 f9f0 	bl	8002f88 <Error_Handler>
  }
}
 8002ba8:	bf00      	nop
 8002baa:	3740      	adds	r7, #64	; 0x40
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002bb4:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002bb6:	4a17      	ldr	r2, [pc, #92]	; (8002c14 <MX_SPI1_Init+0x64>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002be0:	2208      	movs	r2, #8
 8002be2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002bf8:	220a      	movs	r2, #10
 8002bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bfc:	4804      	ldr	r0, [pc, #16]	; (8002c10 <MX_SPI1_Init+0x60>)
 8002bfe:	f7fe ff39 	bl	8001a74 <HAL_SPI_Init>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8002c08:	f000 f9be 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	200019b4 	.word	0x200019b4
 8002c14:	40013000 	.word	0x40013000

08002c18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <MX_USART1_UART_Init+0x4c>)
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <MX_USART1_UART_Init+0x50>)
 8002c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <MX_USART1_UART_Init+0x4c>)
 8002c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <MX_USART1_UART_Init+0x4c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <MX_USART1_UART_Init+0x4c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <MX_USART1_UART_Init+0x4c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <MX_USART1_UART_Init+0x4c>)
 8002c3e:	220c      	movs	r2, #12
 8002c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <MX_USART1_UART_Init+0x4c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <MX_USART1_UART_Init+0x4c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c4e:	4805      	ldr	r0, [pc, #20]	; (8002c64 <MX_USART1_UART_Init+0x4c>)
 8002c50:	f7fe ff75 	bl	8001b3e <HAL_UART_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c5a:	f000 f995 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20001970 	.word	0x20001970
 8002c68:	40013800 	.word	0x40013800

08002c6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <MX_USART2_UART_Init+0x50>)
 8002c74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c92:	220c      	movs	r2, #12
 8002c94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ca2:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <MX_USART2_UART_Init+0x4c>)
 8002ca4:	f7fe ff4b 	bl	8001b3e <HAL_UART_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cae:	f000 f96b 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20001a0c 	.word	0x20001a0c
 8002cbc:	40004400 	.word	0x40004400

08002cc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <MX_USART3_UART_Init+0x50>)
 8002cc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cf6:	4805      	ldr	r0, [pc, #20]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cf8:	f7fe ff21 	bl	8001b3e <HAL_UART_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d02:	f000 f941 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20001864 	.word	0x20001864
 8002d10:	40004800 	.word	0x40004800

08002d14 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <MX_DMA_Init+0x68>)
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <MX_DMA_Init+0x68>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6153      	str	r3, [r2, #20]
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <MX_DMA_Init+0x68>)
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2100      	movs	r1, #0
 8002d36:	200c      	movs	r0, #12
 8002d38:	f7fd fb3d 	bl	80003b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002d3c:	200c      	movs	r0, #12
 8002d3e:	f7fd fb56 	bl	80003ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002d42:	2200      	movs	r2, #0
 8002d44:	2100      	movs	r1, #0
 8002d46:	200d      	movs	r0, #13
 8002d48:	f7fd fb35 	bl	80003b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002d4c:	200d      	movs	r0, #13
 8002d4e:	f7fd fb4e 	bl	80003ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2100      	movs	r1, #0
 8002d56:	200e      	movs	r0, #14
 8002d58:	f7fd fb2d 	bl	80003b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002d5c:	200e      	movs	r0, #14
 8002d5e:	f7fd fb46 	bl	80003ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	2011      	movs	r0, #17
 8002d68:	f7fd fb25 	bl	80003b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002d6c:	2011      	movs	r0, #17
 8002d6e:	f7fd fb3e 	bl	80003ee <HAL_NVIC_EnableIRQ>

}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000

08002d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d86:	f107 0310 	add.w	r3, r7, #16
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d94:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <MX_GPIO_Init+0x90>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <MX_GPIO_Init+0x90>)
 8002d9a:	f043 0320 	orr.w	r3, r3, #32
 8002d9e:	6193      	str	r3, [r2, #24]
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <MX_GPIO_Init+0x90>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <MX_GPIO_Init+0x90>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <MX_GPIO_Init+0x90>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6193      	str	r3, [r2, #24]
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <MX_GPIO_Init+0x90>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <MX_GPIO_Init+0x90>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <MX_GPIO_Init+0x90>)
 8002dca:	f043 0308 	orr.w	r3, r3, #8
 8002dce:	6193      	str	r3, [r2, #24]
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <MX_GPIO_Init+0x90>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002de2:	480c      	ldr	r0, [pc, #48]	; (8002e14 <MX_GPIO_Init+0x94>)
 8002de4:	f7fd fee0 	bl	8000ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dee:	2301      	movs	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2302      	movs	r3, #2
 8002df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfa:	f107 0310 	add.w	r3, r7, #16
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4804      	ldr	r0, [pc, #16]	; (8002e14 <MX_GPIO_Init+0x94>)
 8002e02:	f7fd fd73 	bl	80008ec <HAL_GPIO_Init>

}
 8002e06:	bf00      	nop
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40010c00 	.word	0x40010c00

08002e18 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, ENABLE);
 8002e20:	2201      	movs	r2, #1
 8002e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e26:	4808      	ldr	r0, [pc, #32]	; (8002e48 <HAL_SPI_TxRxCpltCallback+0x30>)
 8002e28:	f7fd febe 	bl	8000ba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, DISABLE);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e32:	4805      	ldr	r0, [pc, #20]	; (8002e48 <HAL_SPI_TxRxCpltCallback+0x30>)
 8002e34:	f7fd feb8 	bl	8000ba8 <HAL_GPIO_WritePin>

	SPI1_TxCompleted = 1;
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <HAL_SPI_TxRxCpltCallback+0x34>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40010c00 	.word	0x40010c00
 8002e4c:	20000005 	.word	0x20000005

08002e50 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	TUINT8 u8Temp;


	 if(huart->Instance==USART1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a20      	ldr	r2, [pc, #128]	; (8002ee0 <HAL_UART_TxCpltCallback+0x90>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10f      	bne.n	8002e82 <HAL_UART_TxCpltCallback+0x32>
	 {
		if (!BUF1_u8SndBuf_Empty())
 8002e62:	f7ff facd 	bl	8002400 <BUF1_u8SndBuf_Empty>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10a      	bne.n	8002e82 <HAL_UART_TxCpltCallback+0x32>
		{
			u8Temp = BUF1_u8SndBuf_Get();
 8002e6c:	f7ff faa8 	bl	80023c0 <BUF1_u8SndBuf_Get>
 8002e70:	4603      	mov	r3, r0
 8002e72:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit_IT(&huart1, &u8Temp, 1);
 8002e74:	f107 030f 	add.w	r3, r7, #15
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4819      	ldr	r0, [pc, #100]	; (8002ee4 <HAL_UART_TxCpltCallback+0x94>)
 8002e7e:	f7fe feab 	bl	8001bd8 <HAL_UART_Transmit_IT>
		}
	 }


	 if(huart->Instance==USART2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <HAL_UART_TxCpltCallback+0x98>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d10f      	bne.n	8002eac <HAL_UART_TxCpltCallback+0x5c>
	 {
		if (!BUF2_u8SndBuf_Empty())
 8002e8c:	f7ff fb60 	bl	8002550 <BUF2_u8SndBuf_Empty>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <HAL_UART_TxCpltCallback+0x5c>
		{
			u8Temp = BUF2_u8SndBuf_Get();
 8002e96:	f7ff fb3b 	bl	8002510 <BUF2_u8SndBuf_Get>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit_IT(&huart2, &u8Temp, 1);
 8002e9e:	f107 030f 	add.w	r3, r7, #15
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4811      	ldr	r0, [pc, #68]	; (8002eec <HAL_UART_TxCpltCallback+0x9c>)
 8002ea8:	f7fe fe96 	bl	8001bd8 <HAL_UART_Transmit_IT>
		}
	 }

	 if(huart->Instance==USART3)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ef0 <HAL_UART_TxCpltCallback+0xa0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_UART_TxCpltCallback+0x86>
	 {
		if (!BUF3_u8SndBuf_Empty())
 8002eb6:	f7ff fbf3 	bl	80026a0 <BUF3_u8SndBuf_Empty>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_UART_TxCpltCallback+0x86>
		{
			u8Temp = BUF3_u8SndBuf_Get();
 8002ec0:	f7ff fbce 	bl	8002660 <BUF3_u8SndBuf_Get>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit_IT(&huart3, &u8Temp, 1);
 8002ec8:	f107 030f 	add.w	r3, r7, #15
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4808      	ldr	r0, [pc, #32]	; (8002ef4 <HAL_UART_TxCpltCallback+0xa4>)
 8002ed2:	f7fe fe81 	bl	8001bd8 <HAL_UART_Transmit_IT>
		}
	 }
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40013800 	.word	0x40013800
 8002ee4:	20001970 	.word	0x20001970
 8002ee8:	40004400 	.word	0x40004400
 8002eec:	20001a0c 	.word	0x20001a0c
 8002ef0:	40004800 	.word	0x40004800
 8002ef4:	20001864 	.word	0x20001864

08002ef8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	 if(huart->Instance==USART1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <HAL_UART_RxCpltCallback+0x6c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d109      	bne.n	8002f1e <HAL_UART_RxCpltCallback+0x26>
	 {
		  BUF1_RecBuf_Put(BUF1_u8Buf);
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_UART_RxCpltCallback+0x70>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fa8a 	bl	8002428 <BUF1_RecBuf_Put>
		  HAL_UART_Receive_IT(&huart1, &BUF1_u8Buf,1);
 8002f14:	2201      	movs	r2, #1
 8002f16:	4914      	ldr	r1, [pc, #80]	; (8002f68 <HAL_UART_RxCpltCallback+0x70>)
 8002f18:	4814      	ldr	r0, [pc, #80]	; (8002f6c <HAL_UART_RxCpltCallback+0x74>)
 8002f1a:	f7fe fea1 	bl	8001c60 <HAL_UART_Receive_IT>
	 }


	 if(huart->Instance==USART2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <HAL_UART_RxCpltCallback+0x78>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d109      	bne.n	8002f3c <HAL_UART_RxCpltCallback+0x44>
	 {
		  BUF2_RecBuf_Put(BUF2_u8Buf);
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_UART_RxCpltCallback+0x7c>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fb23 	bl	8002578 <BUF2_RecBuf_Put>
		  HAL_UART_Receive_IT(&huart2, &BUF2_u8Buf,1);
 8002f32:	2201      	movs	r2, #1
 8002f34:	490f      	ldr	r1, [pc, #60]	; (8002f74 <HAL_UART_RxCpltCallback+0x7c>)
 8002f36:	4810      	ldr	r0, [pc, #64]	; (8002f78 <HAL_UART_RxCpltCallback+0x80>)
 8002f38:	f7fe fe92 	bl	8001c60 <HAL_UART_Receive_IT>
	 }


	 if(huart->Instance==USART3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <HAL_UART_RxCpltCallback+0x84>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d109      	bne.n	8002f5a <HAL_UART_RxCpltCallback+0x62>
	 {
		  BUF3_RecBuf_Put(BUF3_u8Buf);
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_UART_RxCpltCallback+0x88>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fbbc 	bl	80026c8 <BUF3_RecBuf_Put>
		  HAL_UART_Receive_IT(&huart3, &BUF3_u8Buf,1);
 8002f50:	2201      	movs	r2, #1
 8002f52:	490b      	ldr	r1, [pc, #44]	; (8002f80 <HAL_UART_RxCpltCallback+0x88>)
 8002f54:	480b      	ldr	r0, [pc, #44]	; (8002f84 <HAL_UART_RxCpltCallback+0x8c>)
 8002f56:	f7fe fe83 	bl	8001c60 <HAL_UART_Receive_IT>
	 }

}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40013800 	.word	0x40013800
 8002f68:	20000048 	.word	0x20000048
 8002f6c:	20001970 	.word	0x20001970
 8002f70:	40004400 	.word	0x40004400
 8002f74:	20000c55 	.word	0x20000c55
 8002f78:	20001a0c 	.word	0x20001a0c
 8002f7c:	40004800 	.word	0x40004800
 8002f80:	2000145d 	.word	0x2000145d
 8002f84:	20001864 	.word	0x20001864

08002f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f9a:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6193      	str	r3, [r2, #24]
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	61d3      	str	r3, [r2, #28]
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_MspInit+0x60>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HAL_MspInit+0x60>)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40010000 	.word	0x40010000

08002ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0310 	add.w	r3, r7, #16
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a46      	ldr	r2, [pc, #280]	; (800312c <HAL_SPI_MspInit+0x134>)
 8003014:	4293      	cmp	r3, r2
 8003016:	f040 8084 	bne.w	8003122 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800301a:	4b45      	ldr	r3, [pc, #276]	; (8003130 <HAL_SPI_MspInit+0x138>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	4a44      	ldr	r2, [pc, #272]	; (8003130 <HAL_SPI_MspInit+0x138>)
 8003020:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003024:	6193      	str	r3, [r2, #24]
 8003026:	4b42      	ldr	r3, [pc, #264]	; (8003130 <HAL_SPI_MspInit+0x138>)
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003032:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_SPI_MspInit+0x138>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	4a3e      	ldr	r2, [pc, #248]	; (8003130 <HAL_SPI_MspInit+0x138>)
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	6193      	str	r3, [r2, #24]
 800303e:	4b3c      	ldr	r3, [pc, #240]	; (8003130 <HAL_SPI_MspInit+0x138>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800304a:	23b0      	movs	r3, #176	; 0xb0
 800304c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003056:	f107 0310 	add.w	r3, r7, #16
 800305a:	4619      	mov	r1, r3
 800305c:	4835      	ldr	r0, [pc, #212]	; (8003134 <HAL_SPI_MspInit+0x13c>)
 800305e:	f7fd fc45 	bl	80008ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003062:	2340      	movs	r3, #64	; 0x40
 8003064:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 0310 	add.w	r3, r7, #16
 8003072:	4619      	mov	r1, r3
 8003074:	482f      	ldr	r0, [pc, #188]	; (8003134 <HAL_SPI_MspInit+0x13c>)
 8003076:	f7fd fc39 	bl	80008ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_SPI_MspInit+0x140>)
 800307c:	4a2f      	ldr	r2, [pc, #188]	; (800313c <HAL_SPI_MspInit+0x144>)
 800307e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003080:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_SPI_MspInit+0x140>)
 8003082:	2210      	movs	r2, #16
 8003084:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003086:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <HAL_SPI_MspInit+0x140>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_SPI_MspInit+0x140>)
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003092:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_SPI_MspInit+0x140>)
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_SPI_MspInit+0x140>)
 800309a:	2200      	movs	r2, #0
 800309c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <HAL_SPI_MspInit+0x140>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_SPI_MspInit+0x140>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80030aa:	4823      	ldr	r0, [pc, #140]	; (8003138 <HAL_SPI_MspInit+0x140>)
 80030ac:	f7fd f9ba 	bl	8000424 <HAL_DMA_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 80030b6:	f7ff ff67 	bl	8002f88 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <HAL_SPI_MspInit+0x140>)
 80030be:	649a      	str	r2, [r3, #72]	; 0x48
 80030c0:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <HAL_SPI_MspInit+0x140>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80030c6:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_SPI_MspInit+0x148>)
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <HAL_SPI_MspInit+0x14c>)
 80030ca:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030cc:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <HAL_SPI_MspInit+0x148>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <HAL_SPI_MspInit+0x148>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_SPI_MspInit+0x148>)
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030de:	4b18      	ldr	r3, [pc, #96]	; (8003140 <HAL_SPI_MspInit+0x148>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030e4:	4b16      	ldr	r3, [pc, #88]	; (8003140 <HAL_SPI_MspInit+0x148>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_SPI_MspInit+0x148>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030f0:	4b13      	ldr	r3, [pc, #76]	; (8003140 <HAL_SPI_MspInit+0x148>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80030f6:	4812      	ldr	r0, [pc, #72]	; (8003140 <HAL_SPI_MspInit+0x148>)
 80030f8:	f7fd f994 	bl	8000424 <HAL_DMA_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8003102:	f7ff ff41 	bl	8002f88 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a0d      	ldr	r2, [pc, #52]	; (8003140 <HAL_SPI_MspInit+0x148>)
 800310a:	64da      	str	r2, [r3, #76]	; 0x4c
 800310c:	4a0c      	ldr	r2, [pc, #48]	; (8003140 <HAL_SPI_MspInit+0x148>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2100      	movs	r1, #0
 8003116:	2023      	movs	r0, #35	; 0x23
 8003118:	f7fd f94d 	bl	80003b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800311c:	2023      	movs	r0, #35	; 0x23
 800311e:	f7fd f966 	bl	80003ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003122:	bf00      	nop
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40013000 	.word	0x40013000
 8003130:	40021000 	.word	0x40021000
 8003134:	40010800 	.word	0x40010800
 8003138:	20001a4c 	.word	0x20001a4c
 800313c:	40020030 	.word	0x40020030
 8003140:	20001a90 	.word	0x20001a90
 8003144:	4002001c 	.word	0x4002001c

08003148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	; 0x30
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 0320 	add.w	r3, r7, #32
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a85      	ldr	r2, [pc, #532]	; (8003378 <HAL_UART_MspInit+0x230>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d160      	bne.n	800322a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003168:	4b84      	ldr	r3, [pc, #528]	; (800337c <HAL_UART_MspInit+0x234>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	4a83      	ldr	r2, [pc, #524]	; (800337c <HAL_UART_MspInit+0x234>)
 800316e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003172:	6193      	str	r3, [r2, #24]
 8003174:	4b81      	ldr	r3, [pc, #516]	; (800337c <HAL_UART_MspInit+0x234>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003180:	4b7e      	ldr	r3, [pc, #504]	; (800337c <HAL_UART_MspInit+0x234>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	4a7d      	ldr	r2, [pc, #500]	; (800337c <HAL_UART_MspInit+0x234>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6193      	str	r3, [r2, #24]
 800318c:	4b7b      	ldr	r3, [pc, #492]	; (800337c <HAL_UART_MspInit+0x234>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800319c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031a2:	2303      	movs	r3, #3
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a6:	f107 0320 	add.w	r3, r7, #32
 80031aa:	4619      	mov	r1, r3
 80031ac:	4874      	ldr	r0, [pc, #464]	; (8003380 <HAL_UART_MspInit+0x238>)
 80031ae:	f7fd fb9d 	bl	80008ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c0:	f107 0320 	add.w	r3, r7, #32
 80031c4:	4619      	mov	r1, r3
 80031c6:	486e      	ldr	r0, [pc, #440]	; (8003380 <HAL_UART_MspInit+0x238>)
 80031c8:	f7fd fb90 	bl	80008ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80031cc:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <HAL_UART_MspInit+0x23c>)
 80031ce:	4a6e      	ldr	r2, [pc, #440]	; (8003388 <HAL_UART_MspInit+0x240>)
 80031d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031d2:	4b6c      	ldr	r3, [pc, #432]	; (8003384 <HAL_UART_MspInit+0x23c>)
 80031d4:	2210      	movs	r2, #16
 80031d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d8:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <HAL_UART_MspInit+0x23c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031de:	4b69      	ldr	r3, [pc, #420]	; (8003384 <HAL_UART_MspInit+0x23c>)
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031e4:	4b67      	ldr	r3, [pc, #412]	; (8003384 <HAL_UART_MspInit+0x23c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031ea:	4b66      	ldr	r3, [pc, #408]	; (8003384 <HAL_UART_MspInit+0x23c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80031f0:	4b64      	ldr	r3, [pc, #400]	; (8003384 <HAL_UART_MspInit+0x23c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_UART_MspInit+0x23c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80031fc:	4861      	ldr	r0, [pc, #388]	; (8003384 <HAL_UART_MspInit+0x23c>)
 80031fe:	f7fd f911 	bl	8000424 <HAL_DMA_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003208:	f7ff febe 	bl	8002f88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a5d      	ldr	r2, [pc, #372]	; (8003384 <HAL_UART_MspInit+0x23c>)
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
 8003212:	4a5c      	ldr	r2, [pc, #368]	; (8003384 <HAL_UART_MspInit+0x23c>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	2025      	movs	r0, #37	; 0x25
 800321e:	f7fd f8ca 	bl	80003b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003222:	2025      	movs	r0, #37	; 0x25
 8003224:	f7fd f8e3 	bl	80003ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003228:	e0a2      	b.n	8003370 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a57      	ldr	r2, [pc, #348]	; (800338c <HAL_UART_MspInit+0x244>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d15e      	bne.n	80032f2 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003234:	4b51      	ldr	r3, [pc, #324]	; (800337c <HAL_UART_MspInit+0x234>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	4a50      	ldr	r2, [pc, #320]	; (800337c <HAL_UART_MspInit+0x234>)
 800323a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323e:	61d3      	str	r3, [r2, #28]
 8003240:	4b4e      	ldr	r3, [pc, #312]	; (800337c <HAL_UART_MspInit+0x234>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324c:	4b4b      	ldr	r3, [pc, #300]	; (800337c <HAL_UART_MspInit+0x234>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	4a4a      	ldr	r2, [pc, #296]	; (800337c <HAL_UART_MspInit+0x234>)
 8003252:	f043 0304 	orr.w	r3, r3, #4
 8003256:	6193      	str	r3, [r2, #24]
 8003258:	4b48      	ldr	r3, [pc, #288]	; (800337c <HAL_UART_MspInit+0x234>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003264:	2304      	movs	r3, #4
 8003266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003268:	2302      	movs	r3, #2
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800326c:	2303      	movs	r3, #3
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003270:	f107 0320 	add.w	r3, r7, #32
 8003274:	4619      	mov	r1, r3
 8003276:	4842      	ldr	r0, [pc, #264]	; (8003380 <HAL_UART_MspInit+0x238>)
 8003278:	f7fd fb38 	bl	80008ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800327c:	2308      	movs	r3, #8
 800327e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	f107 0320 	add.w	r3, r7, #32
 800328c:	4619      	mov	r1, r3
 800328e:	483c      	ldr	r0, [pc, #240]	; (8003380 <HAL_UART_MspInit+0x238>)
 8003290:	f7fd fb2c 	bl	80008ec <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003294:	4b3e      	ldr	r3, [pc, #248]	; (8003390 <HAL_UART_MspInit+0x248>)
 8003296:	4a3f      	ldr	r2, [pc, #252]	; (8003394 <HAL_UART_MspInit+0x24c>)
 8003298:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800329a:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <HAL_UART_MspInit+0x248>)
 800329c:	2210      	movs	r2, #16
 800329e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a0:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <HAL_UART_MspInit+0x248>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <HAL_UART_MspInit+0x248>)
 80032a8:	2280      	movs	r2, #128	; 0x80
 80032aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ac:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_UART_MspInit+0x248>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032b2:	4b37      	ldr	r3, [pc, #220]	; (8003390 <HAL_UART_MspInit+0x248>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <HAL_UART_MspInit+0x248>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032be:	4b34      	ldr	r3, [pc, #208]	; (8003390 <HAL_UART_MspInit+0x248>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032c4:	4832      	ldr	r0, [pc, #200]	; (8003390 <HAL_UART_MspInit+0x248>)
 80032c6:	f7fd f8ad 	bl	8000424 <HAL_DMA_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80032d0:	f7ff fe5a 	bl	8002f88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a2e      	ldr	r2, [pc, #184]	; (8003390 <HAL_UART_MspInit+0x248>)
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
 80032da:	4a2d      	ldr	r2, [pc, #180]	; (8003390 <HAL_UART_MspInit+0x248>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	2026      	movs	r0, #38	; 0x26
 80032e6:	f7fd f866 	bl	80003b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032ea:	2026      	movs	r0, #38	; 0x26
 80032ec:	f7fd f87f 	bl	80003ee <HAL_NVIC_EnableIRQ>
}
 80032f0:	e03e      	b.n	8003370 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART3)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a28      	ldr	r2, [pc, #160]	; (8003398 <HAL_UART_MspInit+0x250>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d139      	bne.n	8003370 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032fc:	4b1f      	ldr	r3, [pc, #124]	; (800337c <HAL_UART_MspInit+0x234>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	4a1e      	ldr	r2, [pc, #120]	; (800337c <HAL_UART_MspInit+0x234>)
 8003302:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003306:	61d3      	str	r3, [r2, #28]
 8003308:	4b1c      	ldr	r3, [pc, #112]	; (800337c <HAL_UART_MspInit+0x234>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_UART_MspInit+0x234>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	4a18      	ldr	r2, [pc, #96]	; (800337c <HAL_UART_MspInit+0x234>)
 800331a:	f043 0308 	orr.w	r3, r3, #8
 800331e:	6193      	str	r3, [r2, #24]
 8003320:	4b16      	ldr	r3, [pc, #88]	; (800337c <HAL_UART_MspInit+0x234>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800332c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003332:	2302      	movs	r3, #2
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003336:	2303      	movs	r3, #3
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333a:	f107 0320 	add.w	r3, r7, #32
 800333e:	4619      	mov	r1, r3
 8003340:	4816      	ldr	r0, [pc, #88]	; (800339c <HAL_UART_MspInit+0x254>)
 8003342:	f7fd fad3 	bl	80008ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800334a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003354:	f107 0320 	add.w	r3, r7, #32
 8003358:	4619      	mov	r1, r3
 800335a:	4810      	ldr	r0, [pc, #64]	; (800339c <HAL_UART_MspInit+0x254>)
 800335c:	f7fd fac6 	bl	80008ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003360:	2200      	movs	r2, #0
 8003362:	2100      	movs	r1, #0
 8003364:	2027      	movs	r0, #39	; 0x27
 8003366:	f7fd f826 	bl	80003b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800336a:	2027      	movs	r0, #39	; 0x27
 800336c:	f7fd f83f 	bl	80003ee <HAL_NVIC_EnableIRQ>
}
 8003370:	bf00      	nop
 8003372:	3730      	adds	r7, #48	; 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40013800 	.word	0x40013800
 800337c:	40021000 	.word	0x40021000
 8003380:	40010800 	.word	0x40010800
 8003384:	200018e8 	.word	0x200018e8
 8003388:	40020044 	.word	0x40020044
 800338c:	40004400 	.word	0x40004400
 8003390:	2000192c 	.word	0x2000192c
 8003394:	40020080 	.word	0x40020080
 8003398:	40004800 	.word	0x40004800
 800339c:	40010c00 	.word	0x40010c00

080033a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <HardFault_Handler+0x4>

080033b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033b6:	e7fe      	b.n	80033b6 <MemManage_Handler+0x4>

080033b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033bc:	e7fe      	b.n	80033bc <BusFault_Handler+0x4>

080033be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033c2:	e7fe      	b.n	80033c2 <UsageFault_Handler+0x4>

080033c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ec:	f7fc fef4 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80033f8:	4802      	ldr	r0, [pc, #8]	; (8003404 <DMA1_Channel2_IRQHandler+0x10>)
 80033fa:	f7fd f943 	bl	8000684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20001a90 	.word	0x20001a90

08003408 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800340c:	4802      	ldr	r0, [pc, #8]	; (8003418 <DMA1_Channel3_IRQHandler+0x10>)
 800340e:	f7fd f939 	bl	8000684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20001a4c 	.word	0x20001a4c

0800341c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003420:	4802      	ldr	r0, [pc, #8]	; (800342c <DMA1_Channel4_IRQHandler+0x10>)
 8003422:	f7fd f92f 	bl	8000684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200018e8 	.word	0x200018e8

08003430 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003434:	4802      	ldr	r0, [pc, #8]	; (8003440 <DMA1_Channel7_IRQHandler+0x10>)
 8003436:	f7fd f925 	bl	8000684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	2000192c 	.word	0x2000192c

08003444 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */



  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <SPI1_IRQHandler+0x10>)
 800344a:	f7fe f8cf 	bl	80015ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */



  /* USER CODE END SPI1_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200019b4 	.word	0x200019b4

08003458 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <USART1_IRQHandler+0x10>)
 800345e:	f7fe fc53 	bl	8001d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */


  /* USER CODE END USART1_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20001970 	.word	0x20001970

0800346c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <USART2_IRQHandler+0x10>)
 8003472:	f7fe fc49 	bl	8001d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20001a0c 	.word	0x20001a0c

08003480 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003484:	4802      	ldr	r0, [pc, #8]	; (8003490 <USART3_IRQHandler+0x10>)
 8003486:	f7fe fc3f 	bl	8001d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */


  /* USER CODE END USART3_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20001864 	.word	0x20001864

08003494 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <SystemInit+0x5c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <SystemInit+0x5c>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80034a4:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <SystemInit+0x5c>)
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	4911      	ldr	r1, [pc, #68]	; (80034f0 <SystemInit+0x5c>)
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <SystemInit+0x60>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80034b0:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <SystemInit+0x5c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0e      	ldr	r2, [pc, #56]	; (80034f0 <SystemInit+0x5c>)
 80034b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <SystemInit+0x5c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <SystemInit+0x5c>)
 80034c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80034cc:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <SystemInit+0x5c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a07      	ldr	r2, [pc, #28]	; (80034f0 <SystemInit+0x5c>)
 80034d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80034d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <SystemInit+0x5c>)
 80034da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80034de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <SystemInit+0x64>)
 80034e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	40021000 	.word	0x40021000
 80034f4:	f8ff0000 	.word	0xf8ff0000
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80034fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80034fe:	e003      	b.n	8003508 <LoopCopyDataInit>

08003500 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003502:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003504:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003506:	3104      	adds	r1, #4

08003508 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003508:	480a      	ldr	r0, [pc, #40]	; (8003534 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800350c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800350e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003510:	d3f6      	bcc.n	8003500 <CopyDataInit>
  ldr r2, =_sbss
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003514:	e002      	b.n	800351c <LoopFillZerobss>

08003516 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003516:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003518:	f842 3b04 	str.w	r3, [r2], #4

0800351c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800351e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003520:	d3f9      	bcc.n	8003516 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003522:	f7ff ffb7 	bl	8003494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003526:	f000 f80f 	bl	8003548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800352a:	f7ff fae5 	bl	8002af8 <main>
  bx lr
 800352e:	4770      	bx	lr
  ldr r3, =_sidata
 8003530:	080035ec 	.word	0x080035ec
  ldr r0, =_sdata
 8003534:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003538:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800353c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8003540:	20001aec 	.word	0x20001aec

08003544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003544:	e7fe      	b.n	8003544 <ADC1_2_IRQHandler>
	...

08003548 <__libc_init_array>:
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	2500      	movs	r5, #0
 800354c:	4e0c      	ldr	r6, [pc, #48]	; (8003580 <__libc_init_array+0x38>)
 800354e:	4c0d      	ldr	r4, [pc, #52]	; (8003584 <__libc_init_array+0x3c>)
 8003550:	1ba4      	subs	r4, r4, r6
 8003552:	10a4      	asrs	r4, r4, #2
 8003554:	42a5      	cmp	r5, r4
 8003556:	d109      	bne.n	800356c <__libc_init_array+0x24>
 8003558:	f000 f822 	bl	80035a0 <_init>
 800355c:	2500      	movs	r5, #0
 800355e:	4e0a      	ldr	r6, [pc, #40]	; (8003588 <__libc_init_array+0x40>)
 8003560:	4c0a      	ldr	r4, [pc, #40]	; (800358c <__libc_init_array+0x44>)
 8003562:	1ba4      	subs	r4, r4, r6
 8003564:	10a4      	asrs	r4, r4, #2
 8003566:	42a5      	cmp	r5, r4
 8003568:	d105      	bne.n	8003576 <__libc_init_array+0x2e>
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003570:	4798      	blx	r3
 8003572:	3501      	adds	r5, #1
 8003574:	e7ee      	b.n	8003554 <__libc_init_array+0xc>
 8003576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800357a:	4798      	blx	r3
 800357c:	3501      	adds	r5, #1
 800357e:	e7f2      	b.n	8003566 <__libc_init_array+0x1e>
 8003580:	080035e4 	.word	0x080035e4
 8003584:	080035e4 	.word	0x080035e4
 8003588:	080035e4 	.word	0x080035e4
 800358c:	080035e8 	.word	0x080035e8

08003590 <memset>:
 8003590:	4603      	mov	r3, r0
 8003592:	4402      	add	r2, r0
 8003594:	4293      	cmp	r3, r2
 8003596:	d100      	bne.n	800359a <memset+0xa>
 8003598:	4770      	bx	lr
 800359a:	f803 1b01 	strb.w	r1, [r3], #1
 800359e:	e7f9      	b.n	8003594 <memset+0x4>

080035a0 <_init>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	bf00      	nop
 80035a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a6:	bc08      	pop	{r3}
 80035a8:	469e      	mov	lr, r3
 80035aa:	4770      	bx	lr

080035ac <_fini>:
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ae:	bf00      	nop
 80035b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b2:	bc08      	pop	{r3}
 80035b4:	469e      	mov	lr, r3
 80035b6:	4770      	bx	lr
